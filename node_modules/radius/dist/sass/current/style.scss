/**
 * section: current
 * title: Current
 *
 * description:
 *   This is our current collection of components.
 */

// import core dependencies
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */

/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */

html {
  font-family: sans-serif; /* 1 */
  -ms-text-size-adjust: 100%; /* 2 */
  -webkit-text-size-adjust: 100%; /* 2 */
}

/**
 * Remove default margin.
 */

body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */

/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */

audio,
canvas,
progress,
video {
  display: inline-block; /* 1 */
  vertical-align: baseline; /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */

audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */

[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */

/**
 * Remove the gray background color from active links in IE 10.
 */

a {
  background-color: transparent;
}

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */

a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */

/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */

abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */

b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */

dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */

mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */

small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */

/**
 * Remove border when inside `a` element in IE 8/9/10.
 */

img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */

svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */

/**
 * Address margin not present in IE 8/9 and Safari.
 */

figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */

hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */

pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */

code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */

/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */

/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */

button,
input,
optgroup,
select,
textarea {
  color: inherit; /* 1 */
  font: inherit; /* 2 */
  margin: 0; /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */

button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */

button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */

button,
html input[type="button"], /* 1 */
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button; /* 2 */
  cursor: pointer; /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */

button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */

input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */

input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */

input[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  box-sizing: content-box; /* 2 */
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */

fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */

legend {
  border: 0; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */

textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */

optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */

/**
 * Remove most spacing between table cells.
 */

table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}


// import variables
// Configurable:
$radius-config-rem-support: false !default;
$radius-config-ie: false !default;
$radius-config-font-path: 'fonts/current/' !default;
$radius-include-global-styles: true !default;
$radius-include-fonts: true !default;
$radius-include-icons: true !default;
$radius-activate-all-components: false !default;

// declare the empty map that will hold all the values
$variables: ();

// import functions
@function get-const($type, $key, $item: false) {
  @if map-has-key($variables, $type) {
    @if map-has-key(map-get($variables, $type), $key) {
      $el: map-get(map-get($variables, $type), $key);

      @if $item {
        @if length($el) >= $item {
          @return nth($el, $item);
        } @else {
          @error 'The index for the variable is out of bounds';
        }
      }
      @return $el;

    } @else {
      @error 'The variable you are looking for does not exist';
    }

  } @else {
    @error 'The type of variable you are looking for does not exist';
  }
}

@function get-color($color-name, $color-variant: base) {

  $color: get-var($colors, $color-name);

  @if type-of($color) == color {
    @return $color;
  }

  @return map-get($color, $color-variant);
}

@function get-var($type, $key) {
  @if map-has-key($type, $key) {
    @return map-get($type, $key);
  } @else {
    @error 'The variable you are looking for does not exist';
  }
}



// import variables
/**
 * section: current/colors
 * title: Colors
 *
 * layout: current/variables/colors
 *
 * description: |
 *   A list of the approved colors to be used for Funding Circle projects. We use basic color names as key names (purple, green, blue, etc.) with various shades as array elements.
 *
 *   Retrieve the value by using:
 *   ```
 *   get-color(purple, light)
 *   // the 2nd parameter defines the shade of the color - it is an optional parameter, as the default shade is the base shade
 *   ```
 *
 * colors:
 *   - black:
 *     - colors__sample--black: get-color(black)
 *   - blue:
 *     - colors__sample--blue-lighter: get-color(blue, lighter)
 *     - colors__sample--blue-light: get-color(blue, light)
 *     - colors__sample--blue-base: get-color(blue, base)
 *     - colors__sample--blue-dark: get-color(blue, dark)
 *     - colors__sample--blue-darker: get-color(blue, darker)
 *   - green:
 *     - colors__sample--green-lighter: get-color(green, lighter)
 *     - colors__sample--green-light: get-color(green, light)
 *     - colors__sample--green-base: get-color(green, base)
 *     - colors__sample--green-dark: get-color(green, dark)
 *     - colors__sample--green-darker: get-color(green, darker)
 *   - grey cool:
 *     - colors__sample--grey-cool-light: get-color(grey-cool, light)
 *     - colors__sample--grey-cool-base: get-color(grey-cool, base)
 *     - colors__sample--grey-cool-dark: get-color(grey-cool, dark)
 *     - colors__sample--grey-cool-darker: get-color(grey-cool, darker)
 *   - grey warm:
 *     - colors__sample--grey-warm-lighter: get-color(grey-warm, lighter)
 *     - colors__sample--grey-warm-light: get-color(grey-warm, light)
 *     - colors__sample--grey-warm-base: get-color(grey-warm, base)
 *     - colors__sample--grey-warm-dark: get-color(grey-warm, dark)
 *     - colors__sample--grey-warm-darker: get-color(grey-warm, darker)
 *     - colors__sample--grey-warm-darkest: get-color(grey-warm, darkest)
 *   - magenta:
 *     - colors__sample--magenta-lighter: get-color(magenta, lighter)
 *     - colors__sample--magenta-light: get-color(magenta, light)
 *     - colors__sample--magenta-base: get-color(magenta, base)
 *     - colors__sample--magenta-dark: get-color(magenta, dark)
 *     - colors__sample--magenta-darker: get-color(magenta, darker)
 *   - orange red:
 *     - colors__sample--orange-red-lighter: get-color(orange-red, lighter)
 *     - colors__sample--orange-red-light: get-color(orange-red, light)
 *     - colors__sample--orange-red-base: get-color(orange-red, base)
 *     - colors__sample--orange-red-dark: get-color(orange-red, dark)
 *     - colors__sample--orange-red-darker: get-color(orange-red, darker)
 *   - purple:
 *     - colors__sample--purple-lighter: get-color(purple, lighter)
 *     - colors__sample--purple-light: get-color(purple, light)
 *     - colors__sample--purple-base: get-color(purple, base)
 *     - colors__sample--purple-dark: get-color(purple, dark)
 *     - colors__sample--purple-darker: get-color(purple, darker)
 *   - red:
 *     - colors__sample--red: get-color(red)
 *   - turquoise:
 *     - colors__sample--turquoise-lighter: get-color(turquoise, lighter)
 *     - colors__sample--turquoise-light: get-color(turquoise, light)
 *     - colors__sample--turquoise-base: get-color(turquoise, base)
 *     - colors__sample--turquoise-dark: get-color(turquoise, dark)
 *     - colors__sample--turquoise-darker: get-color(turquoise, darker)
 *   - yellow:
 *     - colors__sample--yellow-lighter: get-color(yellow, lighter)
 *     - colors__sample--yellow-light: get-color(yellow, light)
 *     - colors__sample--yellow-base: get-color(yellow, base)
 *     - colors__sample--yellow-dark: get-color(yellow, dark)
 *     - colors__sample--yellow-darker: get-color(yellow, darker)
 *   - white:
 *     - colors__sample--white: get-color(white)
 */

$colors: (

  black: rgb(0,0,0),

  blue: (
    lighter: rgb(219,241,255),
    light: rgb(62,155,214),
    base: rgb(9,127,201),
    dark: rgb(6,94,148),
    darker: rgb(3,40,63)
  ),

  green: (
    lighter: rgb(224,248,205),
    light: rgb(166,224,118),
    base: rgb(120,199,56),
    dark: rgb(70,133,19),
    darker: rgb(31,67,2)
  ),

  grey-cool: (
    light: rgb(221,221,221),
    base: rgb(195,195,195),
    dark: rgb(87,87,87),
    darker: rgb(56,56,56)
  ),

  grey-warm: (
    lighter: rgb(250,250,250),
    light: rgb(246,245,243),
    base: rgb(232,232,232),
    dark: rgb(211,210,208),
    darker: rgb(163,162,160),
    darkest: rgb(131,130,128)
  ),

  magenta: (
    lighter: rgb(236,195,223),
    light: rgb(171,51,131),
    base: rgb(149,45,114),
    dark: rgb(110,18,79),
    darker: rgb(49,6,34)
  ),

  orange-red: (
    lighter: rgb(255,226,217),
    light: rgb(249,143,111),
    base: rgb(239,77,28),
    dark: rgb(194,63,23),
    darker: rgb(123,35,9)
  ),

  purple: (
    lighter: rgb(229,184,226),
    light: rgb(166,92,161),
    base: rgb(119,45,114),
    dark: rgb(82,23,78),
    darker: rgb(39,5,37)
  ),

  red: rgb(214, 0, 54),

  turquoise: (
    lighter: rgb(209,250,255),
    light: rgb(82,211,228),
    base: rgb(15,180,202),
    dark: rgb(8,139,156),
    darker: rgb(3,80,90)
  ),

  yellow: (
    lighter: rgb(255,239,198),
    light: rgb(255,221,134),
    base: rgb(251,199,64),
    dark: rgb(196,150,33),
    darker: rgb(107,79,7)
  ),

  white: rgb(255,255,255)
);

$config: (
  config: (
    ratio: 1.618,
    sqrt-ratio: 1.27201964951,
    unit: 16,
    baseline: 8,
    rem-support: $radius-config-rem-support,
    ie: $radius-config-ie,
    font-path: $radius-config-font-path,
    load-fonts: $radius-include-fonts,
    load-icons: $radius-include-icons,
    font-weight-light: 300,
    font-weight-regular: 400,
    font-weight-bold: 600,
    max-content-width: 1200px,
    column-padding: 16px,
    font-family: 'Source Sans Pro',
    font-sizes: (x-small, small, medium, large, x-large, 2x-large, 3x-large, 4x-large, 5x-large)
  )
);

$variables: map-merge($variables, $config);



// import dependencies
/**
 * section: current/structure/breakpoints
 * title: Breakpoints
 *
 * description: |
 *   Use this mixin for dealing with breakpoints / responsive.
 *   * `mobile-small / mobile-medium / mobile-large`
 *   * `tablet-small / tablet-medium / tablet-large`
 *   * `desktop-small / desktop-medium / desktop-large`
 *
 * layout: current/dependencies/breakpoints/breakpoints
 */

$breakpoints-values: (
  mobile-small: 320,
  mobile-medium: 480,
  mobile-large: 640,

  tablet-small: 768,
  tablet-medium: 800,
  tablet-large: 980,

  desktop-small: 1024,
  desktop-medium: 1200,
  desktop-large: 1400
) !default;

$breakpoints-ie8: false!default;

@function _breakpoints-parse($string) {
  // text to search for
  $FROM: 'from ';
  $TO: 'to ';


  // convert to string
  $string: inspect($string);


  // flags for min and max values
  $has-min: false;
  $has-max: false;


  // check what type of breakpoints we have
  @if type-of(str-index($string, $FROM)) == number {
    $has-min: true;
  }

  @if type-of(str-index($string, $TO)) == number {
    $has-max: true;
  }


  // slice the string to retrieve min and max values for breakpoints
  @if $has-min and $has-max {
    $min-breakpoint: str-slice($string, str-length($FROM) + 1, str-index($string, $TO) - 2);
    $max-breakpoint: str-slice($string, str-index($string, $TO) + str-length($TO));

    @return ($min-breakpoint, $max-breakpoint);
  } @else if $has-min == false {
    $max-breakpoint: str-slice($string, str-length($TO) + 1);

    @return (false, $max-breakpoint);
  } @else if $has-max == false {
    $min-breakpoint: str-slice($string, str-length($FROM) + 1);

    @return ($min-breakpoint, false);
  }

  @return (false, false);
}

@function _string-to-number($string) {
  // inspired by http://hugogiraudel.com/2014/01/15/sass-string-to-number/

  $digits: '0123456789';
  $number: 0;
  $negative: false;
  $units: (
    '%': 1%,
    'ch': 1ch,
    'cm': 1cm,
    'em': 1em,
    'ex': 1ex,
    'in': 1in,
    'mm': 1mm,
    'pc': 1pc,
    'pica': 1pica,
    'pt': 1pt,
    'px': 1px,
    'rem': 1rem,
    'vmax': 1vmax,
    'vmin': 1vmin,
    'vh': 1vh,
    'vw': 1vw
  );
  $unit: null;

  // is it negative?
  @if str-index($string, '-') == 1 {
    $negative: true;
    $string: str-slice($string, 2);
  }

  // parse the string and map it to the indexes of $digits
  @for $i from 1 through str-length($string) {
    $digit: str-slice($string, $i, $i);
    $index: str-index($digits, $digit);

    @if type-of($index) == number {
      $number: $number * 10 + ($index - 1);
    } @else {
      $unit: $unit#{$digit};
    }
  }

  @if $negative {
    $number: $number * (-1);
  }

  @if $unit and map-has-key($units, $unit) {
    $number: $number * map-get($units, $unit);
  }

  @if $string == $unit {
    @return false;
  }

  @return $number;
}

@function _breakpoints-values($value) {
  // try to get the value from the pre-existing breakpoints
  @if map-has-key($breakpoints-values, $value) {
    $value: map-get($breakpoints-values, $value);
    @if unitless($value) {
      $value: $value * 1px;
    }
  }

  @if type-of($value) == string {
    $value: _string-to-number($value);
  }

  @if type-of($value) != number {
    @return false;
  }

  @return $value;
}

@function _set-max-breakpoint($max-breakpoint) {
  @if $max-breakpoint != false {
    @if unit($max-breakpoint) == px {
      $max-breakpoint: $max-breakpoint - 1;
    } @else {
      $max-breakpoint: $max-breakpoint;
    }
  }

  @return $max-breakpoint;
}


@mixin breakpoint($string) {
  $string: _breakpoints-parse($string);
  $min-breakpoint: _breakpoints-values(nth($string, 1));
  $max-breakpoint: _breakpoints-values(nth($string, 2));

  $max-breakpoint: _set-max-breakpoint($max-breakpoint);

  @if ($min-breakpoint == false and $max-breakpoint == false) or ($max-breakpoint == false and $breakpoints-ie8) {
    @content;
  } @else if $min-breakpoint == false {
    @media only screen and (max-width: $max-breakpoint) {
      @content;
    }
  } @else if $max-breakpoint == false {
    @media only screen and (min-width: $min-breakpoint) {
      @content;
    }
  } @else {
    @media only screen and (min-width: $min-breakpoint) and (max-width: $max-breakpoint) {
      @content;
    }
  }
}


// require breakpoint
@mixin to($media-query) {
  @include breakpoint(to $media-query) {
    @content;
  };
}

@mixin from($media-query) {
  @include breakpoint(from $media-query) {
    @content;
  };
}

@mixin from-to($min, $max) {
  @include breakpoint(from $min to $max) {
    @content;
  };
}




/**
 * section: current/structure/grid-system
 * title: Grids / columns
 *
 * description: |
 *   Funding Circle is using the golden ratio grid system. This is different than the usual 12 columns grid system, offering more organic layouts.
 *
 *   Keep in mind that in this case the columns have widths depending on the context and not strictly on parent. If, in a standard grid system the sum of the "column-units" has to be a certain number (e.g. `4 + 4 + 8 = 12` columns grid), in a golden ratio grid system the widths vary depending on the siblings, so they don't have to be summed up to reach a certain number (e.g. `1 + 2` is as valid as `1 + 4 + 2 + 3`).
 *
 *   The columns "widths" are represented by a parameter that can take values from 1 to 8 (1 is the smallest proportion, 8 is the biggest).
 */

/**
 * section: current/structure/grid-system/utility-classes
 * title: Utility classes
 *
 * description: |
 *   Just like Bootstrap, you can use utility classes for fast prototyping. They are splitted in 4 categories: `small`, `medium`, `large`, `extra-large` for responsive prototyping. The approach is mobile-first, where the small columns will be applied accross all resolutions unless another class for a bigger breakpoint is applied.
 *
 *   The parent of the columns require the `.col-s-wrapper / .col-m-wrapper / .col-l-wrapper / .col-xl-wrapper` class on it (the classes are inclusive, so if you use `.col-s-wrapper` the others are not required).
 *
 *   Class structure: `.col-[s/m/l/xl]-[1-8]` (e.g. `.col-m-3` will apply a proportion of 3 on the column from medium screen onwards).
 *
 * markup: current/dependencies/grid-system/utility-classes
 */

/**
 * section: current/structure/grid-system/mixin
 * title: Column generator mixin
 *
 * description: |
 *   For more fine tuned layouts, you can use the mixin and generate more complex layouts between custom breakpoints. This can be used together with `breakpoints()` mixin as it just generates the widths.
 *
 *   The mixin has to be applied on the wrapper of the columns. Adding a comma in the list will generate a new row.
 *
 *   ```
 *   .column-mixin-example {
 *      // columns mixin adds default padding to each column
 *      @include columns(3 2 1, 4 2, 4 1 2 3);
 *      // columns-no-padding mixin does not add default padding to each column
 *      @include columns-no-padding(3 2 1, 4 2, 4 1 2 3);
 *   }
 *   ```
 *
 * markup: current/dependencies/grid-system/column-mixin
 */

/**
 * section: current/structure/grid-system/golden-paddings
 * title: Golden ratio margins
 *
 * description: |
 *   Sets the right and left margins for individual elements/sections, based on the ratio of the margin in proportion to the element/section itself
 *
 *   Sets golden ratio left/right paddings for elements:
 *
 *   ```
 *   golden-ratio-paddings(5, 3, 2)
 *   // the first parameter represents the ratio/proportion of the element content
 *   // 2nd parameter is the left margin
 *   // 3rd parameter is the right margin
 *   ```
 */

// import the breakpoints mixin
$breakpoints-values: (
  mobile-small: 320,
  mobile-medium: 480,
  mobile-large: 640,

  tablet-small: 768,
  tablet-medium: 800,
  tablet-large: 980,

  desktop-small: 1024,
  desktop-medium: 1200,
  desktop-large: 1400
) !default;

$breakpoints-ie8: false!default;

@function _breakpoints-parse($string) {
  // text to search for
  $FROM: 'from ';
  $TO: 'to ';


  // convert to string
  $string: inspect($string);


  // flags for min and max values
  $has-min: false;
  $has-max: false;


  // check what type of breakpoints we have
  @if type-of(str-index($string, $FROM)) == number {
    $has-min: true;
  }

  @if type-of(str-index($string, $TO)) == number {
    $has-max: true;
  }


  // slice the string to retrieve min and max values for breakpoints
  @if $has-min and $has-max {
    $min-breakpoint: str-slice($string, str-length($FROM) + 1, str-index($string, $TO) - 2);
    $max-breakpoint: str-slice($string, str-index($string, $TO) + str-length($TO));

    @return ($min-breakpoint, $max-breakpoint);
  } @else if $has-min == false {
    $max-breakpoint: str-slice($string, str-length($TO) + 1);

    @return (false, $max-breakpoint);
  } @else if $has-max == false {
    $min-breakpoint: str-slice($string, str-length($FROM) + 1);

    @return ($min-breakpoint, false);
  }

  @return (false, false);
}

@function _string-to-number($string) {
  // inspired by http://hugogiraudel.com/2014/01/15/sass-string-to-number/

  $digits: '0123456789';
  $number: 0;
  $negative: false;
  $units: (
    '%': 1%,
    'ch': 1ch,
    'cm': 1cm,
    'em': 1em,
    'ex': 1ex,
    'in': 1in,
    'mm': 1mm,
    'pc': 1pc,
    'pica': 1pica,
    'pt': 1pt,
    'px': 1px,
    'rem': 1rem,
    'vmax': 1vmax,
    'vmin': 1vmin,
    'vh': 1vh,
    'vw': 1vw
  );
  $unit: null;

  // is it negative?
  @if str-index($string, '-') == 1 {
    $negative: true;
    $string: str-slice($string, 2);
  }

  // parse the string and map it to the indexes of $digits
  @for $i from 1 through str-length($string) {
    $digit: str-slice($string, $i, $i);
    $index: str-index($digits, $digit);

    @if type-of($index) == number {
      $number: $number * 10 + ($index - 1);
    } @else {
      $unit: $unit#{$digit};
    }
  }

  @if $negative {
    $number: $number * (-1);
  }

  @if $unit and map-has-key($units, $unit) {
    $number: $number * map-get($units, $unit);
  }

  @if $string == $unit {
    @return false;
  }

  @return $number;
}

@function _breakpoints-values($value) {
  // try to get the value from the pre-existing breakpoints
  @if map-has-key($breakpoints-values, $value) {
    $value: map-get($breakpoints-values, $value);
    @if unitless($value) {
      $value: $value * 1px;
    }
  }

  @if type-of($value) == string {
    $value: _string-to-number($value);
  }

  @if type-of($value) != number {
    @return false;
  }

  @return $value;
}

@function _set-max-breakpoint($max-breakpoint) {
  @if $max-breakpoint != false {
    @if unit($max-breakpoint) == px {
      $max-breakpoint: $max-breakpoint - 1;
    } @else {
      $max-breakpoint: $max-breakpoint;
    }
  }

  @return $max-breakpoint;
}


@mixin breakpoint($string) {
  $string: _breakpoints-parse($string);
  $min-breakpoint: _breakpoints-values(nth($string, 1));
  $max-breakpoint: _breakpoints-values(nth($string, 2));

  $max-breakpoint: _set-max-breakpoint($max-breakpoint);

  @if ($min-breakpoint == false and $max-breakpoint == false) or ($max-breakpoint == false and $breakpoints-ie8) {
    @content;
  } @else if $min-breakpoint == false {
    @media only screen and (max-width: $max-breakpoint) {
      @content;
    }
  } @else if $max-breakpoint == false {
    @media only screen and (min-width: $min-breakpoint) {
      @content;
    }
  } @else {
    @media only screen and (min-width: $min-breakpoint) and (max-width: $max-breakpoint) {
      @content;
    }
  }
}


// require breakpoint
@mixin to($media-query) {
  @include breakpoint(to $media-query) {
    @content;
  };
}

@mixin from($media-query) {
  @include breakpoint(from $media-query) {
    @content;
  };
}

@mixin from-to($min, $max) {
  @include breakpoint(from $min to $max) {
    @content;
  };
}




// config
$golden-grid-max-number: 10!default;
$golden-grid-fallback-class: '.no-flexbox'!default;
$golden-grid-padding: 1.5rem!default;
$golden-grid-ratio: 1.618!default;
$golden-grid-utility-classes: true!default;
$golden-grid-vendor-prefixes: true!default;
$golden-grid-breakpoints: (
  s: false,
  m: mobile-medium,
  l: tablet-medium,
  xl: desktop-medium
)!default;



// mapping the config for easier access
$golden-grid-config: (
  max-number: $golden-grid-max-number,
  no-flex-class: $golden-grid-fallback-class,
  padding: $golden-grid-padding,
  ratio: $golden-grid-ratio,
  utility-classes: $golden-grid-utility-classes,
  utility-classes-breakpoints: $golden-grid-breakpoints,
  vendor-prefixes: $golden-grid-vendor-prefixes
);

// function for easier navigation through the variables map

@function gr($val) {
  @if map-has-key($golden-grid-config, $val) {
    @return map-get($golden-grid-config, $val);
  } @else {
    @error '#{$val} does not exist';
  }
}

// generate the golden scale

@function golden-scale($golden-scale-list: 1) {

  @for $i from $golden-scale-list through gr(max-number) {
    $golden-scale-list-last: nth($golden-scale-list, length($golden-scale-list));

    $golden-scale-list: append($golden-scale-list, $golden-scale-list-last * gr(ratio));
  }

  @return $golden-scale-list;
}

$golden-scale: golden-scale(1);

// send a list of proportions and it returns the percentage for each

@function get-columns-widths($cols) {
  $sum: 0;
  $widths: ();

  // find the sum of all proportions
  @for $i from 1 through length($cols) {
    $current-proportion: nth($cols, $i);
    $ratio-proportion: nth($golden-scale, $current-proportion);
    $sum: $sum + $ratio-proportion;
  }

  // find the proportion for each width
  @for $i from 1 through length($cols) {
    $current-width: 100 * nth($golden-scale, nth($cols, $i)) / $sum;

    @if $i > 1 and $i == length($cols) {
      $current-width: $current-width - .0001; // error margin
    }

    $widths: append($widths, $current-width);
  }

  @return $widths;
}


@mixin column-padding {
  @if gr(padding) {
    padding-left: gr(padding);
    padding-right: gr(padding);
  }
}

// this mixin sets the styling for the wrapper of the elements
// the flag is for table support

@mixin columns-wrapper {

  @if gr(no-flex-class) {
    #{unquote(gr(no-flex-class))} & {
      &:after {
        display: block;
        width: 100%;
        clear: both;
        content: '';
      }
    }
  }

  display: flex;

  @if gr(vendor-prefixes) {
    display: -webkit-flex;
    display: -ms-flexbox;
  }

  flex-wrap: wrap;

  @if gr(vendor-prefixes) {
    -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
  }

  width: 100%;
}

// mixin that generates the styling for each column in the columns mixin

@mixin set-columns-widths($cols, $start-from: 0) {
  @for $i from 1 through length($cols) {

    // $start-from is making sure we're providing the offset for multiple columns
    > :nth-child(#{$i + $start-from}) {
      width: nth($cols, $i) * 1%;

      // fallback
      @if gr(no-flex-class) {
        #{unquote(gr(no-flex-class))} & {

          @if $i == 1 {
            clear: left;
          }
        }
      }

    }
  }
}

// have a floating column that is still following the golden ratio proportions
// $column is the column proportion related to the full width
// $left is the margin left (as a proportion)
// $right is the margin right (as a proportion)
// eg: @include golden-ratio-paddings(4, 3, 2);

@mixin golden-ratio-paddings($column, $left: false, $right: false) {
  $cols: $column;

  @if $left {
    $cols: append($cols, $left);
  }

  @if $right {
    $cols: append($cols, $right);
  }

  $cols: get-columns-widths($cols);

  width: nth($cols, 1) * 1%;

  @if $left {
    margin-left: nth($cols, 2) * 1%;

    @if $right {
      margin-right: nth($cols, 3) * 1%;
    }
  } @elseif $right {
    margin-right: nth($cols, 2) * 1%;
  }

}


// the mixin that generate the columns with no padding

@mixin columns-no-padding($cols...) {
  @include columns-wrapper;

  // check if a comma is present in the cols declaration
  $multi-columns: str-index($cols + '', ',');

  > * {
    @if gr(no-flex-class) {
      #{unquote(gr(no-flex-class))} & {
        float: left;
      }
    }
  }

  @if type-of($multi-columns) == null {

    // all columns are on 1 row, calculate the widths
    $widths: get-columns-widths($cols);

    // set them accordingly
    @include set-columns-widths($widths);

  } @else {
    // we have multiple rows for columns

    // this is the index that counts the :nth-child
    // we need this because we are iterating through a list of lists
    $start-from: 0;

    // go through each row
    @for $i from 1 through length($cols) {

      // find the widths for each row
      $widths: get-columns-widths(nth($cols, $i));

      // set the widths
      @include set-columns-widths($widths, $start-from);

      // update the offset index
      $start-from: $start-from + length($widths);
    }
  }
}

// the mixin that generate the columns with paddings

@mixin columns($cols...) {
  @include columns-no-padding($cols...);

  > * {
    @include column-padding;
  }
}


@if gr(utility-classes) {
  .col {
    // generate responsive classes
    $responsive-map: gr(utility-classes-breakpoints);
    $responsive-keys: map-keys($responsive-map);
    $responsive-values: map-values($responsive-map);

    @for $i from 1 through length($responsive-keys) {
      $breakpoint-from: nth($responsive-values, $i);

      @include from($breakpoint-from) {
        &-#{nth($responsive-keys, $i)} {

          &-wrapper {
            display: table;
            table-layout: fixed;
            width: 100%;
          }

          &-wrapper > * {
            @include column-padding;
            display: table-cell;
          }

          @for $j from 1 through gr(max-number) {
            $current-absolute-proportion: nth($golden-scale, $j);
            &-#{$j} {
              width: $current-absolute-proportion * 1%;
            }
          }
        }
      }
    }
  }
}





// import functions
/**
 * section: current/functions
 * title: Functions
 *
 * description: Helper functions.
 */

/**
 * section: current/functions/lists
 * title: Lists
 *
 * description: Helper functions for manipulating lists.
 */

/**
 * section: current/functions/lists/first
 * title: First item
 *
 * description: |
 *   Get the first item from a list
 *
 *   ```
 *   first($list)
 *   // first(5 1 2 6 10) -> 5
 *   ```
 */

@function first($list) {
  @return nth($list, 1);
}

/**
 * section: current/functions/lists/last
 * title: Last item
 *
 * description: |
 *   Get the last item from a list
 *
 *   ```
 *   last($list)
 *   // last(5 1 2 6 10) -> 10
 *   ```
 */

@function last($list) {
  @return nth($list, length($list));
}


/**
 * section: current/functions/negative
 * title: Negative value
 *
 * description: |
 *   Returns the negative of a value
 *
 *   ```
 *   negative($val)
 *   // negative(10rem) -> -10rem
 *   // negative(true) -> false
 *   ```
 */

@function negative($val) {
  @if $val == true {
    $val: false;
  } @else if $val == false {
    $val: true;
  } @else {
    $val: $val * (-1);
  }
  @return $val;
}

/**
 * section: current/functions/str-split
 * title: Split string using a delimiter.
 *
 * description: |
 *   Returns a list of substrings.
 *
 *   ```
 *   str-split($string, $delimiter)
 *   //str-split('/some-path?query', '?') -> ('/some-path', '?query')
 *   ```
 */

@function str-split($string, $separator) {
  $index: str-index($string, $separator);
  @if not $index {
    @return ($string);
  }

  $left: str-slice($string, 0, $index - 1);
  $right: str-slice($string, $index);

  @return ($left, $right);
}


/**
 * section: current/functions/env-path-helper
 * title: Asset path
 *
 * description: |
 *   Generates the path to an asset, possibly defering to the Rails asset
 *   pipeline helpers.
 *
 *   $path - path to the file
 */

@function env-path-helper($path) {
  $is-radius-rails: function-exists('fc-asset-path');

  @if $is-radius-rails {
    $fragments: str-split($path, '?');
    $path: nth($fragments, 1);
    $query: if(length($fragments) > 1, nth($fragments, 2), '');
    $path: fc-asset-path($path) + $query;
  }

  @return $path;
}

/**
 * section: current/functions/sqrt
 * title: Square root of a number
 *
 * description: |
 *   Returns the square root of a number.
 *
 *   ```
 *   sqrt($val)
 *   // sqrt(30) -> 5.477
 *   // sqrt(25) -> 5
 *   ```
 */

// capitals for constants are not conforming with linter, but are nice for
// readability
// scss-lint:disable NameFormat
@function sqrt($val) {
  // Set the maximum number of "guesses"
  $MAX_NO_OF_STEPS: 1000;

  // Set the maximum deviation from the real value
  $MAX_DEVIATION: .0005;

  // start from a rough value
  $x: $val / 2;

  // the default deviation (greater than the official deviation)
  // this is the starting deviation - will be updated with every iteration
  $deviation: $MAX_DEVIATION + 1;



  // Square root calculation using the Babylonian method
  // Math formula: x(n) = (1/2) * (x(n-1) + ($val / x(n-1)))

  // iteration counter (we need to use while)
  $i: 1;

  // run this until max number of steps or deviation is met
  @if $val > 0 {
    @while $i <= $MAX_NO_OF_STEPS or $deviation >= $MAX_DEVIATION {
      $i: $i + 1;
      $deviation: abs($val - $x * $x);
      $x: .5 * ($x + ($val / $x));
    }
  } @else {
    @error 'Please enter a positive number';
  }

  @return $x;
}
// scss-lint:enable NameFormat
 // used in pow
/**
 * section: current/functions/pow
 * title: Power of a number
 *
 * description: |
 *   Rise a number to a certain power.
 *   For exponents it accepts integers or multiples of .5
 *
 *   ```
 *   pow($number, $exp)
 *   // pow(5, 2) -> 25
 *   // pow(3, 2.5) -> 15.58846
 *   // pow(3, -2) -> 0.11111
 *   ```
 */

@function pow($number, $exp) {
  $result: 1;
  $needs-square-root: false;

  @if type-of($exp) != number {
    // make sure we have the right type of exponent
    @error 'The exponent is not an integer or a multiple of .5';
  } @else if round($exp) != $exp {
    // if we need square root, calculate it and then remove it from the exponent
    $needs-square-root: sqrt($number);
    $exp: $exp - .5;
  }
  // calculate the power

  @if $exp > 0 {
    // if exponent is positive, multiply
    @for $i from 1 through $exp {
      $result: $result * $number;
    }
  } @else if $exp < 0 {
    // if the exponent is negative, divide.
    @for $i from 1 through abs($exp) {
      $result: $result / $number;
    }
  }

  // upate with the square root, if needed
  @if $needs-square-root {
    $result: $result * $needs-square-root;
  }

  @return $result;
}

/**
 * section: current/functions/units
 * title: Units functions
 *
 * description: Functions that are built to manipulate units.
 */

/**
 * section: current/functions/units/strip-unit
 * title: Strip unit
 *
 * description: |
 *   Remove the unit from a number
 *
 *   ```
 *   strip-unit($value)
 *   // strip-unit(10rem) -> 10
 *   ```
 */

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

/**
 * section: current/functions/units/separate-unit
 * title: Separate unit and values
 *
 * description: |
 *   Input a value and it returns a list with the unitless value and unit
 *
 *   ```
 *   separate-unit($val)
 *   // separate-unit(10rem) -> (10, rem)
 *   ```
 */

@function separate-unit($val) {
  $unit: false;

  @if unit($val) != '' {
    $unit: unquote(unit($val));
    $val: strip-unit($val);
  }

  @return ($val, $unit);
}

/**
 * section: current/functions/units/unitless
 * title: Unitless to pixels
 *
 * description: |
 *   Converts a unitless value to pixels
 *
 *   ```
 *   unitless($val)
 *   // $item: 10
 *   // unitless(10) -> 10px
 *   ```
 */

@function unitless($val) {

  @if type-of($val) == number {
    $val: strip-unit($val) * 1px;
  }

  @return $val;
}

/**
 * section: current/functions/units/size
 * title: Size
 *
 * description: |
 *   We use a default base unit. This functions ensures that we always use multiples of that base unit.<br>
 *   We should always define margins / paddings and all other sizes using this function.
 *
 *   ```
 *   unit($val)
 *   // $REMsupport: true -> unit(10 auto 3 0) -> 10rem auto 3rem 0
 *   // $REMsupport: false -> unit(10 auto 3 0) -> 160px auto 30rem 0
 *   ```
 */


@function multiplier($val) {
  // It returns PX or REM values, depending on the $REMsupport flag value
  // This is a support function for size(). You should use that for managing PX vs REM
  //
  // multiplier($val)
  // // considering 1rem = 16px
  // // multiplier(16px) -> 1rem
  // // multiplier(2rem) -> 32px

  // just to make sure we have a fallback for multiplier
  $multiplier: $val;

  // default $unit value
  $unit: rem;

  @if type-of($val) == number and $val != 0 {

    // determine the unit for $val
    $val: separate-unit($val);

    @if last($val) != false {
      $unit: last($val);
    }

    $val: first($val);
    // determine the multiplier
    @if get-const(config, rem-support) {
      @if $unit == rem {
        $multiplier: $val * 1rem;
      } @else if $unit == unquote('%') {
        $multiplier: $val * 1%;
      } @else {
        $multiplier: $val / get-const(config, unit) * 1rem;
      }
    } @else {
      @if $unit == rem {
        $multiplier: $val * get-const(config, unit) * 1px;
      } @else if $unit == unquote('%') {
        $multiplier: $val * 1%;
      } @else {
        $multiplier: $val * 1px;
      }
    }

  }

  @return $multiplier;
}


@function size($val) {
  $c-val: ();
  @if type-of($val) == list {
    @each $i in $val {
      $i: multiplier($i);
      $c-val: append($c-val, $i);
    }

  } @else if type-of($val) == number {
    $c-val: multiplier($val);
  } @else {
    $c-val: $val;
  }

  @return $c-val;
}




// import fonts
/**
 * section: current/icons
 * title: Icons
 * layout: current/icons
 *
 * description: Add the class to load the icon.
 *
 * icons: 
 *   - fci-go-to-arrow
 *   - fci-menu-icon
 *   - fci-tick
 *   - fci-user-circled
 *   - fci-phone-circled
 *   - fci-attention
 *   - fci-info-circled
 *   - fci-close
 *   - fci-transaction
 *   - fci-dollar-sign
 *   - fci-download-circled
 *   - fci-arrow-full-right
 *   - fci-search
 *   - fci-stats
 *   - fci-pound-sign
 *   - fci-user
 *   - fci-pencil
 *   - fci-go-up-arrow
 *   - fci-phone
 */


@if (get-const(config, load-icons) != false) {
  @font-face {
    font-family: "fc-icons";
    src: url(env-path-helper('#{get-const(config, font-path)}fc-icons.eot'));
    src: url(env-path-helper('#{get-const(config, font-path)}fc-icons.eot?#iefix')) format('eot'),
      url(env-path-helper('#{get-const(config, font-path)}fc-icons.woff')) format('woff'),
      url(env-path-helper('#{get-const(config, font-path)}fc-icons.ttf')) format('truetype'),
      url(env-path-helper('#{get-const(config, font-path)}fc-icons.svg#fc-icons')) format('svg');
    font-weight: normal;
    font-style: normal;
  }


  // We need the important rule so that we don't override the icon fonts
  // scss-lint:disable ImportantRule
  .fci-icon:before {
    font-family: "fc-icons" !important;
    font-style: normal !important;
    font-weight: normal !important;
    font-variant: normal !important;
    text-transform: none !important;
    speak: none;
    line-height: inherit;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  // scss-lint:enable ImportantRule

  [class^="fci-"]:before,
  [class*=" fci-"]:before {
    @extend .fci-icon !optional;
  }

  .fci-go-to-arrow:before { content: "\E001"; }
  .fci-menu-icon:before { content: "\E002"; }
  .fci-tick:before { content: "\E003"; }
  .fci-user-circled:before { content: "\E004"; }
  .fci-phone-circled:before { content: "\E005"; }
  .fci-attention:before { content: "\E006"; }
  .fci-info-circled:before { content: "\E007"; }
  .fci-close:before { content: "\E008"; }
  .fci-transaction:before { content: "\E009"; }
  .fci-dollar-sign:before { content: "\E010"; }
  .fci-download-circled:before { content: "\E011"; }
  .fci-arrow-full-right:before { content: "\E012"; }
  .fci-search:before { content: "\E013"; }
  .fci-stats:before { content: "\E014"; }
  .fci-pound-sign:before { content: "\E015"; }
  .fci-user:before { content: "\E016"; }
  .fci-pencil:before { content: "\E017"; }
  .fci-go-up-arrow:before { content: "\E018"; }
  .fci-phone:before { content: "\E019"; }
  
}


/* ---------------------------------------------------------------------- *\
  SOURCE SANS
\* ---------------------------------------------------------------------- */

$source-sans: (
  ( folder: regular, file: Regular, weight: 400, style: normal, svgID: regular),
  ( folder: light, file: Light, weight: 300, style: normal, svgID: light),
  ( folder: light-italic, file: LightIt, weight: 300, style: italic, svgID: light_italic),
  ( folder: italic, file: It, weight: 400, style: italic, svgID: italic),
  ( folder: semi-bold, file: Semibold, weight: 600, style: normal, svgID: semibold),
  ( folder: semi-bold-italic, file: SemiboldIt, weight: 600, style: italic, svgID: SBdIt)
);

@if (get-const(config, load-fonts) != false) {
  @each $item in $source-sans {
    @font-face {
      font-family: get-const(config, font-family);
      font-weight: map-get($item, weight);
      font-style: map-get($item, style);

      src: url(env-path-helper('#{get-const(config, font-path)}fonts/#{map-get($item, folder)}/SourceSansPro-#{map-get($item, file)}.eot'));
      src: url(env-path-helper('#{get-const(config, font-path)}fonts/#{map-get($item, folder)}/SourceSansPro-#{map-get($item, file)}.eot?#iefix')) format('embedded-opentype'),
           url(env-path-helper('#{get-const(config, font-path)}fonts/#{map-get($item, folder)}/SourceSansPro-#{map-get($item, file)}.woff2')) format('woff2'),
           url(env-path-helper('#{get-const(config, font-path)}fonts/#{map-get($item, folder)}/SourceSansPro-#{map-get($item, file)}.woff')) format('woff'),
           url(env-path-helper('#{get-const(config, font-path)}fonts/#{map-get($item, folder)}/SourceSansPro-#{map-get($item, file)}.ttf')) format('truetype'),
           url(env-path-helper('#{get-const(config, font-path)}fonts/#{map-get($item, folder)}/SourceSansPro-#{map-get($item, file)}.svg#source_sans_pro#{map-get($item, svgID)}')) format('svg');
    }
  }
}


// import mixins
/**
 * section: current/mixins
 * title: Mixins
 *
 * description: Useful mixins to use
 */

/**
 * section: current/mixins/animation
 * title: Animation
 *
 * description: Mixins for dealing with CSS animations, that fix the issues with vendor prefixes.
 */

/**
 * section: current/mixins/animation/keyframes
 * title: Keyframes
 *
 * description: |
 *   Mixin for defining keyframes, without worrying about the vendor prefixes issues.<br>
 *   Should be used alongside the `animation` mixin.
 *
 *   E.g. of usage:
 *   ```
 *   @include keyframes(slide-down) {
 *     0% { opacity: 1; }
 *     90% { opacity: 0; }
 *   }
 *   ```
 */

@mixin keyframes($animation-name) {
  // not yet decided on vendor specifics
  // scss-lint:disable VendorPrefix
  @-webkit-keyframes #{$animation-name} {
    @content;
  }

  @keyframes #{$animation-name} {
    @content;
  }
  // scss-lint:enable VendorPrefix
}

/**
 * section: current/mixins/animation/animation
 * title: Animation
 *
 * description: |
 *   Call animations defined by the `keyframes` mixin.
 *
 *   E.g. of usage:
 *   ```
 *   .element {
 *     @include animation('slide-down 5s 3');
 *   }
 *   ```
 */

@mixin animation($str) {
  // not yet decided on implementation of vendor specifics
  // scss-lint:disable VendorPrefix
  -webkit-animation: #{$str};
  animation: #{$str};
  // scss-lint:enable VendorPrefix
}


/**
 * section: current/mixins/breakpoints
 * title: Breakpoints
 *
 * description: Helpers mixins for dealing with responsive and breakpoints
 */

/**
 * section: current/mixins/breakpoints/showbetween
 * title: Show between X and Z
 *
 * description: |
 *   Mixin for showing content between two breakpoints. If one is set to false, it will be ignored.
 *
 *   E.g. of usage:
 *   ```
 *   .test {
 *     @include show-between(mobile-large, tablet-large, block);
 *   }
 *   ```
 */

@mixin show-between($min-val:false, $max-val:false, $display-type: block) {
  @include breakpoint(from $min-val to $max-val) {
    display: $display-type;
  }
}

/**
 * section: current/mixins/breakpoints/hidebetween
 * title: Hide between X and Z
 *
 * description: |
 *   Mixin for hiding content between two breakpoints. If one is set to false, it will be ignored.
 *
 *   E.g. of usage:
 *   ```
 *   .test {
 *    @include hide-between(mobile-small, tablet-large);
 *   }
 *   ```
 */

@mixin hide-between($min-val:false, $max-val:false) {
  @include breakpoint(from $min-val to $max-val) { display: none; }
}


/**
 * section: current/mixins/position
 * title: Positioning
 *
 * description: Mixins to use for positioning elements in page
 */

/**
 * section: current/mixins/position/center-block
 * title: Center block
 *
 * description: |
 *   Center block elements using `margin: auto`
 *
 *   E.g. of usage:
 *   ```
 *   .test {
 *    @include center-block($top: false, $bottom: false)
 *    // if $top / $bottom are false, they will be ignored
 *    // you can set both top and bottom, or just one of them
 *   }
 *   ```
 */

@mixin center-block($top: false, $bottom: false) {

  @if $top { $top: size($top); }
  @if $bottom { $bottom: size($bottom); }

  @if $top and $bottom == false {

    margin: {
      top: $top;
      right: auto;
      left: auto;
    }

  } @else if $top == false and $bottom {

    margin: {
      right: auto;
      bottom: $bottom;
      left: auto;
    }

  } @else if $top and $bottom == true {

    margin: $top auto;

  } @else if $top and $bottom {

    margin: $top auto $bottom;

  } @else {
    margin: {
      right: auto;
      left: auto;
    }
  }
}

/**
 * section: current/mixins/position/pos
 * title: Position
 *
 * description: |
 *   Use this as a shorthand for different positionings
 *
 *   E.g. of usage:
 *   ```
 *   .test {
 *    @include pos(top, right, bottom, left, position, z-index)
 *    // all parameters are optional
 *   }
 *   ```
 */

@mixin pos($top:false, $right:false, $bottom:false, $left:false, $position:false, $z-index: false) {

  $top: size($top);
  $right: size($right);
  $bottom: size($bottom);
  $left: size($left);


  @if $position { position: $position; }
  @if $top { top: $top; }
  @if $right { right: $right; }
  @if $bottom { bottom: $bottom; }
  @if $left { left: $left; }
  @if $z-index { z-index: $z-index; }
}


// dependent on `pos`
/**
 * section: current/mixins/position/posabs
 * title: Position absolute
 *
 * description: |
 *   Use this as a shorthand for position absolute
 *
 *   E.g. of usage:
 *   ```
 *   .test {
 *    @include pos-abs(top, right, bottom, left, z-index)
 *    // all parameters are optional
 *   }
 *   ```
 */

@mixin pos-abs($top:false, $right:false, $bottom:false, $left:false, $z-index:false) {
  @include pos($top, $right, $bottom, $left, $position:absolute, $z-index:$z-index);
}

/**
 * section: current/mixins/position/center-abs
 * title: Center with position absolute
 *
 * description: |
 *   This will center an element in the center of the relative parent, using position absolute. Requires the element to have `width` and `height` defined.
 *
 *   E.g. of usage:
 *   ```
 *   .test {
 *      @include center-abs($z-index: 3)
 *   }
 *   ```
 */

@mixin center-abs($z-index:false) {
  @include pos-abs(0,0,0,0, $z-index);
  margin: auto;
}


/**
 * section: current/mixins/conditionals
 * title: Browser conditionals
 *
 * description: |
 *   Use these mixins to generate CSS either only for IE, or for everything else and not IE.<br>
 *   It requires the `body` to have a class called `ie-<IE VERSION>`, where `<IE VERSION>` is `8` or `9`.
 */

/**
 * section: current/mixins/conditionals/forie
 * title: Target only IE
 *
 * description: |
 *   Use this mixin to condition content only for IE.
 *
 *   E.g. of usage:
 *   ```
 *   .test {
 *     @include for-ie(8) {
 *       // style only for IE8
 *       display: table;
 *     }
 *   }
 *   ```
 */

@mixin for-ie($ie-version: 8) {
  .ie-#{$ie-version} & {
    @content;
  }
}

/**
 * section: current/mixins/conditionals/notie
 * title: Target everything else, except IE
 *
 * description: |
 *   Use this mixin to condition content for modern browsers, except IE (8 or 9).
 *
 *   E.g. of usage:
 *   ```
 *   .test {
 *    @include not-ie(8) {
 *      // style for modern browsers, except IE8
 *      display: flex;
 *    }
 *   }
 *   ```
 */

@mixin not-ie($ie-version: 8) {
  html:not(.ie-#{$ie-version}) {
    @content;
  }
}


/**
 * section: current/mixins/utilities
 * title: Utilities
 *
 * description: Miscellaneous utility mixins.
 */

/**
 * section: current/mixins/utilities/box-sizing
 * title: Box sizing
 * description: this should always be border box
 */

@mixin box-sizing($val: border-box) {
  @include prefix(box-sizing, $val, webkit moz)
}

/**
 * section: current/mixins/utilities/opacity
 * title: Opacity
 * description: sets the opacity in a cross browser compatible way.
 */

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;

  // scss-lint:disable all
  filter: alpha(opacity=$opacity-ie);
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity-ie})";
  // scss-lint:enable all
}

/**
 * section: current/mixins/utilities/gradient
 * title: Gradient
 * description: |
 *   @include gradient($orientation,($color-list),[$angle]);
 *   $orientation: string -> horizontal / vertical / radial / angle
 *   $color-list: a list of pairs for color stops (color percentage)
 *              e.g (rgb(0,0,0) 0%, rgb(255,255,255) 15%, rgb(0,0,0) 100%)
 *   $angle: if $orientation: angle, then here you set the angle degree
 *            e.g. @include gradient(angle,(...),50deg);
 */

// scss-lint:disable all
@mixin gradient($orientation, $color-list, $angle:false) {

  // set type of gradient
  $grad-type: linear;

  @if $orientation == radial {
    $grad-type: radial;
  }

  $gradient-direction1: left;
  $gradient-direction2: left top, right top;
  $gradient-direction3: to right;
  $gradient-type: 1;

  // "translate" $orientation
  @if $orientation == radial {

    $gradient-direction1: center, ellipse cover;
    $gradient-direction2: radial, center center, 0, center center, 100%;
    $gradient-direction3: ellipse at center;

  } @else if $orientation == vertical {

    $gradient-direction1: top;
    $gradient-direction2: left top, left bottom;
    $gradient-direction3: to bottom;
    $gradient-type: 0;

  } @else if $orientation == angle {
    $gradient-direction1: $angle - 180;
    $gradient-direction2: $angle; // TO DO
    $gradient-direction3: $angle;
    $gradient-type: 1;
  }

  // fallback in case gradient is not supported
  background: first(first($color-list));

  $gradient-color-format1: $color-list; // this has the correct format

  background: -moz-#{$grad-type}-gradient(
    $gradient-direction1,
    $gradient-color-format1
  );

  background: -webkit-#{$grad-type}-gradient(
    $gradient-direction1,
    $gradient-color-format1
  );

  background: -o-#{$grad-type}-gradient(
    $gradient-direction1,
    $gradient-color-format1
  );

  background: -ms-#{$grad-type}-gradient(
    $gradient-direction1,
    $gradient-color-format1
  );

  background: #{$grad-type}-gradient(
    $gradient-direction3,
    $gradient-color-format1
  );

  $ie-first-color: ie-hex-str(first(first($color-list)));
  $ie-last-color: ie-hex-str(first(last($color-list)));

  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$ie-first-color}', endColorstr='#{$ie-last-color}',GradientType=1);
}
// scss-lint:enable all

/**
 * section: current/mixins/utilities/prefix
 * title: Prefix
 * description: Generate a declaration with vendor prefixes.
 */

@mixin prefix($property, $value, $vendors: webkit moz ms o) {
  @if $vendors {
    @each $vendor in $vendors {
      #{'-' + $vendor + '-' + $property}: #{$value};
    }
  }
  #{$property}: #{$value};
}

/**
 * section: current/mixins/utilities/list-unstyled
 * title: Unstyled lists
 *
 * description: |
 *   Remove the default list style and reset its margin and padding
 *
 *   E.g. of usage:
 *   ```
 *   ul {
 *     @include list-unstyled;
 *   }
 *   ```
 */

@mixin list-unstyled {
  margin: 0;
  padding: 0;
  list-style: none;
}

/**
 * section: current/mixins/utilities/transition
 * title: Transition
 * description: |
 *   $property: all / background / color / height / width / outline
 *   $duration: any number
 *   $unit: ms / s
 *   $function: ease / linear / ease-in / ease-out / ease-in-out
 */

@mixin transition($property:all, $duration:200, $unit: ms, $function: ease) {
  @include prefix(transition, $property #{$duration}#{$unit} $function);
}

/**
 * section: current/mixins/utilities/triangle
 * title: Triangle generator
 * description: |
 *   $size: (width,height) - if height is not specified, height = width
 *   $direction: up / down / right / left /
 *               up left / up right
 *               down left / down right
 */

@mixin triangle($direction,$color,$size) {
  display: block;
  width: 0;
  height: 0;

  // convert to rem / px
  $size: size($size);


  // read width and height
  $width: if(first($direction) == last($direction), first($size) / 2, first($size));
  $height: last($size);

  $solid: top;
  $transparent: left, right;

  @if first($direction) == up {

    @if last($direction) == right {
      $solid: right;
      $transparent: bottom;
    } @else if last($direction) == left {
      $solid: left;
      $transparent: bottom;
    } @else {
      $solid: bottom;
      $transparent: left, right;
    }

  } @else if first($direction) == down {

    @if last($direction) == right {
      $solid: right;
      $transparent: top;
    } @else if last($direction) == left {
      $solid: left;
      $transparent: top;
    } @else {
      $solid: top;
      $transparent: left, right;
    }

  } @else if $direction == right {

    $solid: left;
    $transparent: top, bottom;

  } @else if $direction == left {

    $solid: right;
    $transparent: top, bottom;

  }

  border-#{$solid}: $height solid $color;

  @each $i in $transparent {
    $color-border: transparent;
    border-#{$i}: $width solid $color-border;
  }

}




// import typography
/**
 * section: current/typography
 * title: Typography
 *
 * description: Using the right font family is important when building a brand. Also, setting the correct `font-size` and `line-height`.
 */

// function that calculates the corresponding font sizes for the scale
// it returns a list with the font sizes
// formula used: f(i) = f(0) * r^(i/2)

@function get-font-sizes() {
  $font-sizes: get-const(config, font-sizes);
  $font-ratio: get-const(config, ratio);
  $font-size-unit: get-const(config, unit);
  $font-sizes-values: ();

  // the index for the medium font in $font-sizes
  $font-regular-index: 1;

  // decide which is the default font size (medium)
  @for $i from 1 through length($font-sizes) {
    @if nth($font-sizes, $i) == medium {
      $font-regular-index: $i * 1; // multiplication needed because the latest version of Sass is using the iterator as a pointer when referenced rather than assigning it's value
    }
  }

  // create the font sizes list
  @for $i from 1 through length($font-sizes) {
    $value: round($font-size-unit * pow($font-ratio, ($i - $font-regular-index) / 2));
    $font-sizes-values: append($font-sizes-values, $value);
  }

  @return $font-sizes-values;
}

/*
function that calculates the corresponding line heights relative to the font sizes calculated with get-font-sizes() function
it returns a list with the line heights
the line height is the first multiple of baseline after the font size
*/

$cached-font-sizes: get-font-sizes();

@function get-line-heights() {
  $font-sizes: $cached-font-sizes;
  $font-size-base: get-const(config, baseline);

  $line-heights: ();

  @each $font-size in $font-sizes {
    // get the reminder
    $line-height-remainder: $font-size % $font-size-base;

    // find the line-height
    $line-height: $font-size + ($font-size-base - $line-height-remainder);

    // append the line-height to the list
    $line-heights: append($line-heights, $line-height);
  }

  @return $line-heights;
}
 // needs get-font-sizes
// create a map where the key is the get-const(config, font-sizes) (small, medium, ...) and the value is a list with font size and line height

$cached-line-heights: get-line-heights();

@function font-size-map() {
  $font-sizes: get-const(config, font-sizes);
  $font-size-map: ();

  @for $i from 1 through length($font-sizes) {
    $font-size-map: map-merge($font-size-map, (nth($font-sizes, $i) : (nth($cached-font-sizes, $i), nth($cached-line-heights, $i))));
  }

  @return $font-size-map;
}
 // needs get-line-heights

/**
 * section: current/typography/font
 * title: Fonts
 *
 * description: |
 *   Funding Circle uses a font scaling method called the ditonic golden ratio.<br>
 *   In order to make sure you are using the correct font size, you can send a note (parameter) to a mixin called `font()`
 *
 *   The `font()` mixin also will automatically adjust the `line-height` to the correct value (the `line-height` is the first multiple of the get-const(config, baseline)).
 *
 *   If you want to disable the `line-height`, set the 2nd parameter to `false`.
 *
 *   Options for font size (t-shirt sizing):
 *   `x-small, small, medium, large, x-large, 2x-large, 3x-large, 4x-large, 5x-large`
 *
 *   E.g. of usage:
 *   ```
 *   .example-element {
 *     @include font(x-large, [$line-height: true/false]);
 *   }
 *   ```
 *
 * modifiers:
 *   font-size-x-small: '@include font(x-small);'
 *   font-size-small: '@include font(small);'
 *   font-size-medium: '@include font(medium);'
 *   font-size-large: '@include font(large);'
 *   font-size-x-large: '@include font(x-large);'
 *   font-size-2x-large: '@include font(2x-large);'
 *   font-size-3x-large: '@include font(3x-large);'
 *   font-size-4x-large: '@include font(4x-large);'
 *   font-size-5x-large: '@include font(5x-large);'
 *
 * markup: current/typography/mixins/font
 */

$cached-font-map: font-size-map();

@mixin font($note, $line-height: true) {

  // backwards compatibility for numerical font size (-2 is the smallest and 6 is the largest font with 0 being the default font)
  @if str-length(inspect($note)) <= 2 {
    // @debug is cleaner and less noisy than @warn so it's suited for this
    // scss-lint:disable DebugStatement
    @warn 'You are using a deprecated form of the font mixin.';
    // scss-lint:enable DebugStatement
    // map the old font declaration to the new one (get the first element - key - from the nth element of the map from the $note + 2 position, where +2 is the offset from the old declaration)
    $note: first(nth($cached-font-map, $note + 3));
  }

  font-size: size(first(map-get($cached-font-map, $note)) * 1px);

  // backwards compatibility for line height
  @if type-of($line-height) == number {
    line-height: $line-height;
  }

  @if $line-height and type-of($line-height) != number {
    line-height: size(last(map-get($cached-font-map, $note)) * 1px);
  }
}





.upper-title {
  @include font(medium);

  margin-bottom: size(1);

  font-weight: get-const(config, font-weight-light);
  text-transform: uppercase;
}

// Headers
h1,
h2,
h3,
h4,
h5,
h6 {
  margin: 0 0 1em;

  font-weight: get-const(config, font-weight-bold);
}


// import structure
/**
 * section: current/structure
 * title: Structure
 *
 * description: Everything related to the page structure.
 */

/**
 * section: current/structure/mixins
 * title: Structure mixins
 */


/* ---------------------------------------------------------------------- *\
  COLORS FOR SELECTED TEXT
\* ---------------------------------------------------------------------- */

@mixin text-selection($ts-background: get-color(magenta, light), $ts-color: get-color(white)) {
  background: $ts-background;
  color: $ts-color;
}

/**
 * section: current/structure/mixins/wrap
 * title: Wrap
 * description: |
 *   Adjust the left and right padding of selected element
 *
 *   $padding: false / true / number
 *     a) FALSE - default value
 *     b) TRUE - default padding applied
 *     c) NUMBER - enter a numeric value to be received in REMs, e.g. entering "1" would pass that value as size(1)
 *
 *   $breakpoints: two values that determine when the padding is applied
 */

%wrap-placeholder {
  @include center-block(0, true);
  width: 100%;
  max-width: get-const(config, max-content-width);
}

@mixin wrap-this($padding: false, $breakpoints: (false false)) {
  @extend %wrap-placeholder;

  @if type-of($padding) == number {
    @include breakpoint(from first($breakpoints) to last($breakpoints)) {
      padding-right: size($padding);
      padding-left: size($padding);
    }
  } @else if $padding {
      @include breakpoint(from first($breakpoints) to last($breakpoints)) {
        padding-right: get-const(config, column-padding);
        padding-left: get-const(config, column-padding);
      }
  }
}


// order for this should not be altered
/**
 * section: current/structure/mixins/group-elements
 * title: Element groups
 * description: |
 *   $item is an arglist which takes lists with the following params:
 *     - min breakpoint - integer or false
 *     - max breakpoint - integer or false
 *     - number of columns - integer
 *     - center last - bolean (use with care, it generates a lot of CSS)

 *   e.g:
 *   layout with:
 *     - 1 column between a and b
 *     - 2 columns between b and c
 *     - 3 columns between c and d and last one centered

 *   @include group-elements(a b 1 false, b c 2 false, 3 c d true);
 */

@mixin group-elements($item...) {
  $bp-min: 9999;
  $bp-max: 0;

  @each $list in $item {
    $list-bp-min: nth($list, 1); // breakpoint min - integer or false
    $list-bp-max: nth($list, 2); // breakpoint max - integer or false
    $list-cols:  nth($list, 3); // number of columns - integer
    $list-last:  nth($list, 4); // center last one - bolean

    // find the smallest breakpoint
    // we need this to know where to apply the general styling
    @if $bp-min != false {
      @if $list-bp-min == false {
        $bp-min: $list-bp-min;
      } @else if $list-bp-min < $bp-min {
        $bp-min: $list-bp-min;
      }
    }

    // find the largest breakpoint
    // we need this to know where to apply the general styling
    @if $bp-max != false {
      @if $list-bp-max == false {
        $bp-max: $list-bp-max;
      } @else if $list-bp-max > $bp-max {
        $bp-max: $list-bp-max;
      }
    }

    @include breakpoint(from $list-bp-min to $list-bp-max) {
      > * {
        // width is 100 divided by the number of columns
        width: percentage(1 / $list-cols);

        &:nth-child(#{$list-cols}n+1) {
          // add the clear to every first item on a new row
          @include clear-float(false, false);

          @if $list-last {
            // find the first item of the last row and add the correction by figuring out how many elements are on that list
            @for $i from 1 through ($list-cols - 1) {
              &:nth-last-child(#{$i}) {
                margin-left: percentage((1 / $list-cols) / 2 * ($list-cols - $i));
              }
            }
          }
        }

      }
    }

  }

  @include breakpoint(from $bp-min to $bp-max) {
    @include clear-float(true, false);
    display: block;

    > * {
      float: left;
    }
  }

}


// order for this should not be altered
// used by clear-float
@mixin clear-css($pseudo: true) {
  @if $pseudo {
    &:after {
      display: table;
      width: 100%;
      clear: both;

      content: '';
    }
  } @else {
    clear: both;
  }
}


%clear-float {
  @include clear-css(false);
}

%clear-float-pseudo-element {
  @include clear-css;
}

@mixin clear-float($pseudo: true, $extend: true) {
  @if $pseudo {
    @if $extend {
      @extend %clear-float-pseudo-element;
    } @else {
      @include clear-css;
    }
  } @else {
    @if $extend {
      @extend %clear-float;
    } @else {
      @include clear-css(false);
    }
  }
}



@if $radius-include-global-styles {
  html,
  body {
    @include font(medium);

    vertical-align: baseline;
  }

  // not yet decided on vendor specifics
  // scss-lint:disable VendorPrefix
  ::-moz-selection { @include text-selection; }
  ::selection { @include text-selection; }
  // scss-lint:enable VendorPrefix

  html {
    @include box-sizing();
  }

  *,
  *:after,
  *:before {
    box-sizing: inherit;
  }

  body {
    font-family: get-const(config, font-family), sans-serif;
    color: get-color(black);

    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;

    background: get-color(grey-warm, lighter);
  }


  a {
    @include transition();

    color: get-color(blue);
    text-decoration: none;

    &:hover {
      text-decoration: underline;
    }
  }

  p {
    margin: 0 0 1em;
  }

  fieldset {
    padding: 0;
    margin: 0;
    border: 0;
  }
}

:last-child {
  margin-bottom: 0;
}


// import utility classes
/**
 * section: current/utility-classes
 * title: Utility classes
 *
 * description: Use these helpful utility classes to add certain behaviors and styling to your elements. To use, add the class(es) directly to your HTML.
 */


/**
 * section: current/utility-classes/floats
 * title: Floats
 *
 * description: |
 *   You can float an element left or right. Use the class `u-clear-float` to clear floats on elements and `u-clearfix` to clear an element's child elements.
 *
 * modifiers:
 *   u-float-left: Float left
 *   u-float-right: Float right
 *
 * markup: current/utility-classes/floats
 */
.u-float-left {
  float: left;
}


.u-float-right {
  float: right;
}


.u-clearfix {
  @extend %clear-float-pseudo-element;
}


.u-clear-float {
  @extend %clear-float;
}


/**
 * section: current/utility-classes/alignment
 * title: Alignment
 *
 * description: Change the text alignment of an element to center or center an element by using the class `u-center`.
 *
 * modifiers:
 *   u-center-text: Center aligned
 *
 * markup: current/utility-classes/alignment
 */
.u-center {
  @include center-block;
}


.u-center-text {
  text-align: center;
}


/**
 * section: current/utility-classes/layout
 * title: Layout
 *
 * description: |
 *   Change the layout of an element either by display or position.
 *   Use the class `u-full-width` for a block display at a width of 100%.
 *   Use the classes `u-block` for a block display and `u-inline-block` for an inline-block display.
 *   Use the classes `u-relative` for a relative position and `u-absolute` for an absolute position.
 *
 *   ```
 *   <img class="u-full-width">
 *   <div class="u-full-width">...</div>
 *   ```
 *
 *   ```
 *   <img class="u-block">
 *   ```
 *
 *   ```
 *   <div class="u-inline-block">...</div>
 *   ```
 *
 *   ```
 *   <div class="u-relative">
 *     <div class="u-absolute">...</div>
 *   </div>
 *   ```
 */
.u-block {
  display: block;
}


.u-inline-block {
  display: inline-block;
}


.u-relative {
  position: relative;
}


.u-absolute {
  position: absolute;
}


/**
 * section: current/utility-classes/images
 * title: Images
 *
 * description: Style your image to be round.
 *
 * modifiers:
 *   u-img-round: Round image
 *
 * markup: current/utility-classes/images
 */
.u-img-round {
  display: block;
  width: 100%;
  height: auto;

  border-radius: 50%;
}


/**
 * section: current/utility-classes/fonts
 * title: Font properties
 *
 * description: Update the properties of fonts.
 *
 * modifiers:
 *   u-font-regular: Regular font weight
 *   u-font-bold: Bold font weight
 *   u-font-light: Light font weight
 *
 * markup: current/utility-classes/fonts
 */
.u-font-regular {
  font-weight: get-const(config, font-weight-regular);
}


.u-font-bold {
  font-weight: get-const(config, font-weight-bold);
}


.u-font-light {
  font-weight: get-const(config, font-weight-light);
}


/**
 * section: current/utility-classes/backgrounds
 * title: Background colors
 *
 * description: Change the background of an element by assigning the following classes.
 *
 * modifiers:
 *   u-background-1: get-color(grey-warm)
 *   u-background-2: get-color(yellow)
 *   u-background-3: get-color(blue, lighter)
 *   u-background-4: get-color(white)
 *   u-background-5: get-color(grey-warm, darkest)
 *   u-background-6: get-color(magenta)
 *   u-background-7: get-color(grey-warm, light)
 *   u-background-8: get-color(grey-cool, darker)
 *
 * markup: current/utility-classes/backgrounds
 */
.u-background {
  &-1 { background: get-color(grey-warm); }
  &-2 { background: get-color(yellow); }
  &-3 { background: get-color(blue, lighter); }
  &-4 { background: get-color(white); }
  &-5 { background: get-color(grey-warm, darkest); }
  &-6 { background: get-color(magenta); }
  &-7 { background: get-color(grey-warm, light); }
  &-8 { background: get-color(grey-cool, darker); }
}


/**
 * section: current/utility-classes/wrapper
 * title: Wrapper
 *
 * description: Add a left and right padding to an element, or remove the padding.
 *
 * modifiers:
 *   u-wrap: Add the default padding
 *   u-wrap--nopad: Apply zero padding
 *
 * markup: current/utility-classes/wrapper
 */
.u-wrap {
  @include wrap-this(true);
}


.u-wrap--nopad {
  @include wrap-this();
}


/**
 * section: current/utility-classes/titles
 * title: Titles
 *
 * description: Adds default styling to label-style titles that precede main title
 *
 * modifiers:
 *   u-title-label: Add the default styling for title type
 *
 * markup: current/utility-classes/titles
 */
.u-title-label {
  @include font(small);

  margin-top: 0;
  margin-bottom: 0;

  font-weight: get-const(config, font-weight-regular);
  text-transform: uppercase;
}


/**
 * section: current/utility-classes/visually-hidden
 * title: Hide content for accessibility
 *
 * description: Hides the content while keeping it focusable and available to screen readers. See https://snook.ca/archives/html_and_css/hiding-content-for-accessibility and HTML5 Boilerplate for details
 *
 * modifiers:
 *   u-visually-hidden: Visually hide this block
 *
 * markup: current/utility-classes/visually-hidden
 */
.u-visually-hidden {
  position: absolute;

  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0 0 0 0);

  border: 0;
}

/**
 * section: current/utility-classes/currency-label
 * title: Currency label
 *
 * description: Prepends the value with a currency sign defined as a data attribute
 *
 * modifiers:
 *   u-currency-label: Visually hide this block
 *
 * markup: current/utility-classes/currency-label
 */
.u-currency-label:before {
  content: attr(data-currency);
}


// import components
 /**
 * section: current/components
 * title: Components
 *
 * description:
 *   This is a collection of ready-made and reusable components.
 *   Some of the following components require a specific HTML structure, while others simply require the corresponding class names.
 */

/**
 * section: current/components/accordion
 * title: Accordion
 *
 * activateComponent: radius-component-accordion
 *
 * description: |
 *   Accordion was intented to be used in the style of presenting information under titles in a dynamic and elegant way. Some examples of using the accordion would be in an FAQ section and a Q and A section.
 *
 *   ### Environment specific behaviour:
 *   When JavaScript is not available the hidden content in the accordion will become visible.
 *
 * markup: current/components/accordion/accordion
 */

$_accordion: (
  text-toggle-color: get-color(blue, base),
  border-color: get-color(grey-cool, light),
  icon-size: size(1.5),
  icon-bar-length: 10px,
  icon-bar-width: 2px,
  padding: size(1.5)
);


@function accordion($val) {
  @return map-get($_accordion, $val);
}


@mixin radius-component-accordion {
  .accordion__title {
    @include font(2x-large);

    margin-bottom: size(2.5);

    font-weight: get-const(config, font-weight-light);
  }


  .accordion-item {
    position: relative;

    border-bottom: 1px solid accordion(border-color);
  }


  .accordion-item.is-active {
    background-color: get-color(white);
  }


  .accordion-item:first-of-type {
    border-top: 1px solid accordion(border-color);
  }


  .accordion-item__title {
    @include font(large);

    padding: accordion(padding) (accordion(padding) * 2) accordion(padding) accordion(padding);
    margin-bottom: 0;

    font-weight: get-const(config, font-weight-regular);
    color: accordion(text-toggle-color);


    &:hover {
      cursor: pointer;
    }
  }


  .accordion-item__icon {
    position: absolute;
    top: size(1.5);
    right: size(1.5);

    width: accordion(icon-size);
    height: accordion(icon-size);

    color: accordion(text-toggle-color);

    border: 2px solid accordion(text-toggle-color);
    border-radius: 50%;


    &:before,
    &:after {
      position: absolute;
      top: 50%;
      left: 50%;

      background-color: accordion(text-toggle-color);
      border-radius: 1px;

      content: '';
    }


    &:before {
      width: accordion(icon-bar-length);
      height: accordion(icon-bar-width);
      margin-top: negative(accordion(icon-bar-width) / 2);
      margin-left: negative(accordion(icon-bar-length) / 2);
    }


    &:after {
      width: accordion(icon-bar-width);
      height: accordion(icon-bar-length);
      margin-top: negative(accordion(icon-bar-length) / 2);
      margin-left: negative(accordion(icon-bar-width) / 2);
    }
  }


  .accordion-item.is-active .accordion-item__icon:after {
    height: 0;
    margin-top: 0;
  }


  .accordion-item__content {
    @include font(medium);

    display: none;
    padding: 0 accordion(padding);
  }


  .accordion-item.is-active .accordion-item__content {
    display: block;
    padding: 0 accordion(padding) accordion(padding);
  }


  .accordion-support {
    margin-top: size(2);
  }


  .accordion-support__item {
    display: table;
  }


  .accordion-support__image,
  .accordion-support__copy {
    display: table-cell;

    vertical-align: middle;
  }


  .accordion-support__image {
    max-width: size(6);
  }


  .accordion-support__image--round {
    border-radius: 50%;
  }


  .accordion-support__copy {
    padding-right: size(1);
    padding-left: size(1);
  }


  .accordion-support__link {
    @include font(large);

    display: block;

    font-weight: get-const(config, font-weight-bold);
  }


  .accordion-support--guide {
    padding-bottom: size(2);
    margin-bottom: size(2);

    border-bottom: 1px solid accordion(border-color);
  }
}

/**
 * section: current/components/buttons
 * title: Buttons
 *
 * activateComponent: radius-component-buttons
 *
 * description: |
 *   To create a button, simply add the <code>.btn</code> class to a <code>button</code>, <code>a</code>, or <code>input</code> element.<br>
 *   Each button should have the <code>.btn</code> class to start with, followed by the available button classes to create the desired button styling (e.g. size, importance).
 *
 * usage:
 *   btn: Basic usage
 *
 * layout: current/components/buttons/buttons
 */


/**
 * section: current/components/buttons/sizes
 * title: Sizes
 *
 * description: |
 *   By default the buttons have a predefined size. If you want to create a different sized button, you can use one of the classes listed below:
 *
 * sizes:
 *   btn--small: Small button
 *   btn--large: Large button
 *
 * layout: current/components/buttons/buttons
 */

/**
 * section: current/components/buttons/importance
 * title: Importance
 *
 * description: |
 *   Certain buttons could be more important than others. There should be a clear separation in terms of the visual order of importance of the buttons on a page.
 *
 * importance:
 *   btn--primary: Primary button. The most visible button when it comes to importance.
 *   btn--secondary: This should be used in conjunction with a primary button. It means that the button is still visible to users, but less important than the primary button.
 *   btn--secondary-alt: Same meaning as .btn-secondary. This should be used on dark backgrounds.
 *   btn--link: Least important type of button. Should be used in cases where the users are not encouraged to click it (e.g. "Erase your data"). Visually, it is similar to a regular link but it can inherit all other properties of a button (size, icons, disabled, etc.).
 *
 * layout: current/components/buttons/buttons
 */

/**
 * section: current/components/buttons/variations
 * title: Variations
 *
 * description: |
 *   Button variation go here.
 *
 * variations:
 *   btn--full: This makes the button fill 100% of the available width.
 *   btn--no-margin: By default buttons have a margin bottom set to them. This cancels that margin.
 *   is-loading: This is a state class that can be applied while an action is performed in the background (e.g. SPAs - saving / importing data).
 *   fci-[icon]: This adds an icon to the left of the button. [icon] is a placeholder for the icon name. A list of all the available icons can be found on the Variables page.
 *   btn--disabled: For disabled buttons, apply this class or simply add the `disabled` attribute.
 *
 * layout: current/components/buttons/buttons
 */


@mixin radius-subcomponent-buttons-loop-rotate {
  @include keyframes(loop-rotate) {
    0% {
      transform: rotate(0);
    }

    100% {
      transform: rotate(360deg);
    }
  }
}



$btn-primary: (
  bg-inactive: get-color(blue),
  bg-hover: get-color(blue, light),
  bg-active: get-color(blue, dark),
  bg-disabled: get-color(grey-cool, light),
  color-inactive: get-color(white)
);

$btn-secondary: (
  bg-inactive: transparent,
  bg-hover: rgba(get-color(white), .6),
  bg-active: rgba(get-color(blue, light), .1),
  bg-disabled: rgba(get-color(white), .6),

  color-inactive: get-color(blue),
  color-disabled: get-color(grey-cool),

  border-color-inactive: get-color(grey-warm, darker),
  border-color-hover: get-color(blue),
  border-color-active: get-color(blue),
  border-color-disabled: get-color(grey-cool)
);

$btn-secondary-alt: (
  bg-inactive: transparent,
  bg-hover: rgba(get-color(black), .3),
  bg-active: rgba(get-color(black), .2),
  bg-disabled: rgba(get-color(black), .2),

  color-inactive: get-color(white),
  color-disabled: rgba(get-color(white), .2),

  border-color-inactive: get-color(white),
  border-color-active: rgba(get-color(white), .5),
);

$btn-link: (
  color-inactive: get-color(blue),
);

$btn-is-loading: (
  spinner-thickness: 2px,
  spinner-color: get-color(white)
);


// basic button structure
%btn {
  @include font(medium, false);

  display: inline-block;
  padding: size(0 1);
  margin-bottom: size(1);

  line-height: size(3);
  white-space: nowrap;

  border: 0;
  border-radius: size(.3);


  &:hover {
    text-decoration: none;
  }
}


// default button
@mixin radius-component-buttons {
  @include radius-subcomponent-buttons-loop-rotate;

  .btn {
    @extend %btn;
  }


  // sizes - large
  .btn--large {
    @extend %btn;
    @include font(large);

    padding-top: size(.875);
    padding-bottom: size(.875);
  }


  // sizes - small
  .btn--small {
    @extend %btn;
    @include font(small);

    padding-top: size(.625);
    padding-bottom: size(.625);
  }


  // importance - primary
  .btn--primary {
    @extend %btn;

    color: map-get($btn-primary, color-inactive);

    background: map-get($btn-primary, bg-inactive);


    &:hover,
    &:focus {
      background: map-get($btn-primary, bg-hover);
    }


    &:active {
      background: map-get($btn-primary, bg-active);
    }
  }


  .btn--primary.btn--disabled,
  .btn--primary[disabled] {
    background: map-get($btn-primary, bg-disabled);
  }


  // importance - secondary
  .btn--secondary {
    @extend %btn;

    color: map-get($btn-secondary, color-inactive);

    background: map-get($btn-secondary, bg-inactive);
    border: 1px solid map-get($btn-secondary, border-color-inactive);


    &:hover,
    &:focus {
      background: map-get($btn-secondary, bg-hover);
      border-color: map-get($btn-secondary, border-color-hover);
    }


    &:active {
      background: map-get($btn-secondary, bg-active);
      border-color: map-get($btn-secondary, border-color-active);
    }
  }


  .btn--secondary.btn--disabled,
  .btn--secondary[disabled] {
    color: map-get($btn-secondary, color-disabled);

    background: map-get($btn-secondary, bg-disabled);
    border-color: map-get($btn-secondary, border-color-disabled);
  }


  // importance - secondary alternative
  .btn--secondary-alt {
    @extend %btn;

    color: map-get($btn-secondary-alt, color-inactive);

    background: map-get($btn-secondary-alt, bg-inactive);
    border: 1px solid map-get($btn-secondary-alt, border-color-inactive);


    &:hover,
    &:focus {
      background: map-get($btn-secondary-alt, bg-hover);
    }


    &:active {
      background: map-get($btn-secondary-alt, bg-active);
      border-color: map-get($btn-secondary-alt, border-color-active);
    }
  }


  .btn--secondary-alt.btn--disabled,
  .btn--secondary-alt[disabled] {
    color: map-get($btn-secondary-alt, color-disabled);

    background: map-get($btn-secondary-alt, bg-disabled);
    border: 0;
  }


  // importance - link
  .btn--link {
    padding: 0;

    font: inherit;
    color: map-get($btn-link, color-inactive);

    background: none;
    border: 0;


    &:hover,
    &:focus,
    &:active {
      text-decoration: underline;

      background: none;
    }
  }


  // special cases - with icon
  .btn[class*="fci-"] {
    &:before {
      float: left;
      margin-right: size(.75);

      font-size: inherit;
      line-height: inherit;
    }
  }


  // special cases - loading button
  .btn.is-loading:after {
    @include animation(loop-rotate 1.4s infinite linear);

    display: inline-block;
    width: size(1);
    height: size(1);
    margin-left: size(1);

    vertical-align: middle;
    border: map-get($btn-is-loading, spinner-thickness) solid map-get($btn-is-loading, spinner-color);
    border-bottom-color: transparent;
    border-radius: 50%;

    content: '';
    transform: translateZ(0);
  }


  .btn--secondary.is-loading:after {
    border-color: map-get($btn-secondary, border-color-disabled);
    border-bottom-color: transparent;
  }


  // special cases - full width
  .btn--full {
    @extend %btn;

    display: block;
    width: 100%;

    text-align: center;
  }


  // special cases - no bottom margin
  .btn--no-margin {
    margin-bottom: 0;
  }
}

/**
 * section: current/components/form
 * title: Form elements
 *
 * description: Use the following input elements to build your form. Add a class of `u-background-1` to the wrapper for extra contrast.
 */

// Mixins
@mixin custom-option-selector {
  input,
  .form-radio__item,
  .form-checkbox__item {
    position: absolute;

    @content;
  }
}

@mixin placeholder-style {
  @include opacity(.4);

  font-style: italic;
  color: get-color(grey-cool, darker);
}



// Placeholders
%block-form-element {
  @include font(medium, false);

  display: block;
  width: 100%;
  min-height: size(2.5);
  padding: size(0 1);

  line-height: size(2.5);

  background: get-color(white);
  border: 0;
  outline: 1px solid get-color(grey-cool, light);
  outline-offset: initial;


  &:focus,
  &:active {
    outline-color: get-color(blue, light);
  }


  &:not([data-required]):valid,
  &.is-valid {
    border-right: 4px solid get-color(green);
  }

  &:not(:focus):invalid,
  &[data-required].is-error {
    color: get-color(red);

    outline-color: get-color(red);
  }
}

$_radio-and-checkbox: (
  option-size: size(1.5),
  padding-size: size(2),
  option-offset: size(.313)
);


%radio-and-checkbox-element {
  position: relative;

  display: inline-block;



}


[class*="ie"][class*="8"] %radio-and-checkbox-element input {
  z-index: 2;
}


%radio-and-checkbox-toggle {
  position: relative;
  z-index: 1;

  display: block;
  width: get-var($_radio-and-checkbox, option-size);
  height: get-var($_radio-and-checkbox, option-size);


  &:before,
  &:after {
    @include center-abs(1);

    display: block;
  }


  &:before {
    z-index: 2;
  }


  &:after {
    background: get-color(white);
    border: 1px solid get-color(grey-cool, light);

    content: '';
  }
}


%radio-and-checkbox-position-left {
  @include custom-option-selector {
    top: 0;
    left: 0;
  }
}


%radio-and-checkbox-position-left input {
  top: get-var($_radio-and-checkbox, option-offset);
  left: get-var($_radio-and-checkbox, option-offset);
}


%radio-and-checkbox-position-left label {
  padding-left: get-var($_radio-and-checkbox, padding-size);

  line-height: get-var($_radio-and-checkbox, option-size);
}


%radio-and-checkbox-position-right {
  @include custom-option-selector {
    top: 0;
    right: 0;
  }
}


%radio-and-checkbox-position-right input {
  top: get-var($_radio-and-checkbox, option-offset);
  right: get-var($_radio-and-checkbox, option-offset);
}


%radio-and-checkbox-position-right label {
  padding-right: get-var($_radio-and-checkbox, padding-size);

  line-height: get-var($_radio-and-checkbox, option-size);
  text-align: right;
}


%radio-and-checkbox-position-bottom {
  @include custom-option-selector {
    right: 0;
    bottom: 0;
    left: 0;

    margin: 0 auto;
  }
}


%radio-and-checkbox-position-bottom input {
  bottom: get-var($_radio-and-checkbox, option-offset);
}


%radio-and-checkbox-position-bottom label {
  display: block;
  padding-bottom: get-var($_radio-and-checkbox, option-size) + size(.5);

  text-align: center;
}


%radio-and-checkbox-position-top {
  @include custom-option-selector {
    top: 0;
    right: 0;
    left: 0;

    margin: 0 auto;
  }
}


%radio-and-checkbox-position-top input {
  top: get-var($_radio-and-checkbox, option-offset);
}


%radio-and-checkbox-position-top label {
  display: block;
  padding-top: get-var($_radio-and-checkbox, option-size) + size(.5);

  text-align: center;
}

$_select-form-element: (
  arrow-height: .7,
  arrow-width: .5
);


%select-form-element {
  position: relative;

  height: size(2.5);


  &:before,
  &:after {
    position: absolute;
    z-index: 1;

    display: block;

    content: '';
  }
}


html:not(.ie) %select-form-element {
  &:after {
    @include pos-abs($top: 0, $bottom: 0);
    @include triangle(down, get-color(grey-cool, darker), get-var($_select-form-element, arrow-height) get-var($_select-form-element, arrow-width));

    margin: auto 0;
  }
}


%select-form-element select {
  @include prefix(appearance, none, webkit moz);

  z-index: 2;
  width: 100%;
  height: 100%;
  padding: size(0 1);
  margin: 0;

  vertical-align: middle;

  background: none;
  border: 0;
  border-radius: 0;


  &:-moz-focusring {
    color: transparent;
    text-shadow: 0 0 0 get-color(black);

    transition: none;
  }


  &::-ms-expand {
    display: none;
  }
}


.ie %select-form-element select {
  padding: size(.5 1);
}


%select-form-element option {
  padding: size(.5 1);
}



// components
/**
 * section: current/components/form/dynamic-number-input
 * title: Dynamic Number Input Field
 *
 * activateComponent: radius-component-dynamic-number-input
 *
 * description: |
 *   Resizes with input length and allows for min as well as max value settings.
 *   An error message will appear if the criteria are not met.
 *   Only whole numbers are supported.
 *
 * markup: current/components/form/dynamic-number-input/dynamic-number-input
 */


$_dynamic-number-input: (
  symbol-dimension: 26px,
  symbol-arrow: '\2794',
  error-overflow: 40%,
  notification-triangle-size: 24px,
  input-line-height: 40px
);


@mixin radius-component-dynamic-number-input {
  .dynamic-number-input {
    @include font(2x-large);

    position: relative;

    display: inline-block;

    margin-bottom: size(1);
    border-bottom: 1px dotted rgba(get-color(black), .4);
  }


  .dynamic-number-input::before {
    position: absolute;

    line-height: get-var($_dynamic-number-input, input-line-height);

    content: attr(data-currency);
  }


  .dynamic-number-input__focusable {
    cursor: text;
  }


  .dynamic-number-input__focusable:after {
    @extend .fci-pencil:before !optional;
    @extend .fci-icon:before !optional;
    @include font(medium);

    position: absolute;
    top: 0;
    right: size(.5);
    bottom: 0;

    display: inline-block;
    width: get-var($_dynamic-number-input, symbol-dimension);
    height: get-var($_dynamic-number-input, symbol-dimension);
    margin: auto;

    color: get-color(white);
    text-align: center;
    pointer-events: none;

    background-color: get-color(blue, dark);
    border: 1px solid get-color(blue, dark);
    border-radius: 25%;
  }


  .dynamic-number-input__submit {
    @include font(medium);

    position: absolute;
    top: 0;
    right: size(.5);
    bottom: 0;
    z-index: 1;

    width: get-var($_dynamic-number-input, symbol-dimension);
    height: get-var($_dynamic-number-input, symbol-dimension);
    padding: 0;
    margin-top: auto;
    margin-bottom: auto;

    color: get-color(blue, dark);

    background: get-color(white);
    border: 1px solid get-color(blue, dark);
    border-radius: 25%;


    .is-clean & {
      display: none;
    }
  }


  .dynamic-number-input__submit:after {
    content: get-var($_dynamic-number-input, symbol-arrow);
  }


  .dynamic-number-input__input-field {
    z-index: 1;

    padding-top: 0;
    padding-right: size(2.25);
    padding-bottom: 0;
    padding-left: .5em;

    line-height: get-var($_dynamic-number-input, input-line-height);

    background: transparent;
    border: 0;
  }


  .dynamic-number-input__error {
    @include font(medium);

    position: absolute;
    bottom: 120%;
    left: 50%;

    display: none;
    width: size(15);
    padding: size(1);

    text-align: center;
    background: get-color(white);
    transform: translateX(-50%); //centering using translate to ensure error is centered regardless of the width of the parent
    box-shadow: 0 0 2px rgba(get-color(black), .3);


    .is-error & {
      display: block;
    }
  }


  .dynamic-number-input__error:after {
    position: absolute;
    bottom: 0;
    left: 50%;

    display: block;
    width: get-var($_dynamic-number-input, notification-triangle-size);
    height: get-var($_dynamic-number-input, notification-triangle-size);
    margin-bottom: negative(get-var($_dynamic-number-input, notification-triangle-size) / 2);
    margin-left: negative(get-var($_dynamic-number-input, notification-triangle-size) / 2);

    background: get-color(white);
    content: '';
    transform: rotate(45deg);
    box-shadow: 1px 1px 1px -1px rgba(get-color(black), .3);
  }
}

/**
 * section: current/components/form/input
 * title: Input elements
 *
 * activateComponent: radius-component-component-input
 *
 * modifiers:
 *   is-valid: Add this class if the input is valid. The class should be applied on the `input` element
 *   is-error: Add this class if the input has an error. The class should be applied on the `input` element
 *
 * markup: current/components/form/input/input
 */


@mixin radius-component-input {
  .form-element {
    margin-bottom: size(1);
  }


  .form-element input {
    @extend %block-form-element;
  }
}

/**
 * section: current/components/form/checkbox
 * title: Checkboxes
 *
 * activateComponent: radius-component-form-checkbox
 *
 * description: |
 *   Use checkboxes for selecting one or more options from a list.
 *
 * modifiers:
 *   form-checkbox--left: align to the left of label
 *   form-checkbox--right: align to the right of label
 *   form-checkbox--bottom: align to the bottom of label
 *   form-checkbox--top: align to the top of label
 *
 * markup: current/components/form/checkbox/checkbox
 */


@mixin radius-component-form-checkbox {
  .form-checkbox {
    @extend %radio-and-checkbox-element;
  }


  .form-checkbox__item {
    @extend %radio-and-checkbox-toggle;


    &:before {
      @extend .fci-icon !optional;
      @extend .fci-tick !optional;

      right: auto;

      width: 0;
      margin: auto 0 auto 15%;
      overflow: hidden;

      line-height: get-var($_radio-and-checkbox, option-size);
      color: get-color(blue);
    }
  }


  .form-checkbox input:checked ~ label .form-checkbox__item:before {
    width: 70%;
  }


  .form-checkbox input:focus ~ label .form-checkbox__item:after {
    border-color: get-color(blue, light);
  }


  .form-checkbox--left { @extend %radio-and-checkbox-position-left; }
  .form-checkbox--right { @extend %radio-and-checkbox-position-right; }
  .form-checkbox--bottom { @extend %radio-and-checkbox-position-bottom; }
  .form-checkbox--top { @extend %radio-and-checkbox-position-top; }
}

/**
 * section: current/components/form/radio
 * title: Radio buttons
 *
 * activateComponent: radius-component-form-radio
 *
 * description: |
 *   Use radio buttons for selecting one option out of a list of options.
 *
 * modifiers:
 *   form-radio--left: align to the left of label
 *   form-radio--right: align to the right of label
 *   form-radio--bottom: align to the bottom of label
 *   form-radio--top: align to the top of label
 *
 * markup: current/components/form/radio/radio
 */


@mixin radius-component-form-radio {
  .form-radio {
    @extend %radio-and-checkbox-element;
  }


  .form-radio__item {
    @extend %radio-and-checkbox-toggle;


    &:before,
    &:after {
      border-radius: 50%;
    }


    &:before {
      width: 0;
      height: 0;

      background: get-color(blue);

      content: '';
    }
  }


  .form-radio input:checked ~ label .form-radio__item:before {
    width: get-var($_radio-and-checkbox, option-size) / 2;
    height: get-var($_radio-and-checkbox, option-size) / 2;
  }


  .form-radio input:focus ~ label .form-radio__item:after {
    border-color: get-color(blue, light);
  }


  .form-radio--left { @extend %radio-and-checkbox-position-left; }
  .form-radio--right { @extend %radio-and-checkbox-position-right; }
  .form-radio--bottom { @extend %radio-and-checkbox-position-bottom; }
  .form-radio--top { @extend %radio-and-checkbox-position-top; }
}

// different version of browsers require different syntax
// scss-lint:disable VendorPrefix, Indentation
::-webkit-input-placeholder { @include placeholder-style; }
     :-ms-input-placeholder { @include placeholder-style; }
         ::-moz-placeholder { @include placeholder-style; }
          :-moz-placeholder { @include placeholder-style; }
// scss-lint:enable VendorPrefix, Indentation

/**
 * section: current/components/form/select
 * title: Select element
 *
 * activateComponent: form-element-select
 *
 * modifiers:
 *   is-valid: add this class if the input is valid. The class should be applied on the `.form-element-select` element
 *   is-error: add this class if the input has an error. The class should be applied on the `.form-element-select` element
 *
 * markup: current/components/form/select/select
 */


$_form-element-select: (
  icon-width: 2.6px * get-const(config, unit),
  arrow-position-right: 2.6px * get-const(config, unit) / (2 + get-var($_select-form-element, arrow-width))
);


@mixin radius-component-form-element-select {
  .form-element-select {
    @extend %block-form-element;
    @extend %select-form-element;


    &.is-error {
      color: get-color(red);

      outline-width: 1px;
      outline-style: solid;
      outline-color: get-color(red);
    }
  }


  html:not(.ie) .form-element-select {
    &:before {
      top: 0;
      right: 0;

      width: get-var($_form-element-select, icon-width);
      height: 100%;

      border-left: 1px solid get-color(grey-cool, light);
    }


    &:after {
      right: get-var($_form-element-select, arrow-position-right);
    }
  }


  .form-element-select select {
    @include center-abs();

    box-shadow: 0 1px 1px 0 rgba(get-color(black), .1);


    &:focus {
      outline: 1px solid get-color(blue, light);
      outline-offset: 0;
    }
  }
}

/**
 * section: current/components/form/textarea
 * title: Textarea element
 *
 * activateComponent: radius-component-textarea
 *
 * modifiers:
 *   is-valid: add this class if the input is valid. The class should be applied on the `textarea` element
 *   is-error: add this class if the input has an error. The class should be applied on the `textarea` element
 *
 * markup: current/components/form/textarea/textarea
 */


@mixin radius-component-textarea {
  .form-element textarea {
    @extend %block-form-element;

    padding-top: size(.5);
    padding-bottom: size(.5);

    line-height: normal;
  }


  .form-element__chars-left {
    @include font(small);

    margin: size(.5 0);

    text-align: right;
  }
}

/**
 * section: current/components/form/error-message
 * title: Error messages
 *
 * activateComponent: radius-component-error-message
 *
 * description: |
 *   Use the error-message component to display validation errors.
 *   The error message will be visible when the field is invalid and is not focused.
 *   If you'd like to show the error message only when the field has been 'touched'
 *   at least once, use the enable-required-fields JS module and mark required fields
 *   with the data-required attribute.
 *
 * markup: current/components/form/error-message/error-message
 */


$_error-message: (
  arrow-height: 10px
);


@mixin radius-component-error-message {
  .error-message {
    @include font(medium);

    position: relative;
    display: none;

    width: 100%;
    padding: size(1);
    margin-top: size(1);

    color: get-color(white);

    background: get-color(red);


    &:before {
      @include triangle(up, get-color(red), (get-var($_error-message, arrow-height) * 2) get-var($_error-message, arrow-height));

      position: absolute;
      top: negative(get-var($_error-message, arrow-height));
      left: size(2);

      content: '';
    }


    &.is-visible {
      display: block;
    }
  }


  .is-error ~ .error-message,
  :not(:focus):invalid ~ .error-message {
    display: block;
  }


  :not([data-required]):valid ~ .error-message {
    display: none;
  }
}


// group mixin flags
@mixin radius-component-form-core {
  @include radius-component-form-checkbox;
  @include radius-component-error-message;
  @include radius-component-input;
  @include radius-component-form-radio;
  @include radius-component-form-element-select;
  @include radius-component-textarea;
}

/**
 * section: current/components/gotolink
 * title: Go-to-link arrows
 *
 * activateComponent: radius-component-go-to-link
 *
 * description: |
 *   The arrows are used to link to a desired section with a smooth scroll.
 *   The element should be an anchor `<a>` with the `href` linked to the section where you need to scroll to.<br><br>
 *   The arrow positions itself at the top of a section using `position: absolute` so make sure the container has a `position: relative`.
 *   Also, the background color is inherited from the parent, so make sure the parent has a defined color.
 *
 * markup: current/components/go-to-link/go-to-link
 */

$_go-to-link: (
  size: size(3)
);

@mixin radius-component-go-to-link {
  .go-to-link {
    @include center-block(0, true);
    @include pos-abs(negative(get-var($_go-to-link, size) / 2), 0, false, 0);

    z-index: 2;

    display: block;
    width: get-var($_go-to-link, size);
    height: get-var($_go-to-link, size);

    font-size: get-var($_go-to-link, size) * 1.25 / 2;
    line-height: get-var($_go-to-link, size);
    text-align: center;

    background: inherit;
    border-radius: 50%;


    &:hover {
      text-decoration: none;
    }


    &:before {
      @extend .fci-icon !optional;
      @extend .fci-go-to-arrow !optional;
    }
  }
}

/**
 * section: current/components/hero
 * title: Hero
 *
 * activateComponent: radius-component-hero
 *
 * description: |
 *   A hero is a section that sets the mood for the page, offering the most important data relevant to that page. The component by default offers only a skeleton, setting the right font size for title, content and the correct top and/or bottom minimum paddings.
 *   The component should be customised by adding a modifier class on the same level as `hero`. E.g. `<section class="hero hero--homepage">[...]</section>` and use that modifier class to add background images and various spacing.
 *
 *   ### Limitations:
 *   This component must be used only once per page, at the top (below the header but before any other content).
 *   This section spans from one edge of the browser to the other. Should not be contained inside any sort of wrapper that limits the max-width so that the background is not limited to that. The content (copy) is contained within the default wrapper (`.u-wrap`)
 *
 * markup: current/components/hero/hero
 */

$_hero: (
  breakpoint: mobile-large
);


@function hero($val) {
  @return map-get($_hero, $val);
}


@mixin radius-component-hero {
  .hero {
    padding-top: size(2);
    padding-bottom: size(2);

    color: get-color(white);

    background: get-color(purple) no-repeat top right;
    background-size: cover;


    @include from(hero(breakpoint)) {
      padding-top: size(4.5);
      padding-bottom: size(4.5);
    }
  }


  .hero__title {
    @include font(3x-large);

    display: block;
    margin: size(0 auto 1);

    font-weight: get-const(config, font-weight-regular);


    @include from(hero(breakpoint)) {
      @include font(5x-large);
    }
  }


  .hero__content {
    @include font(large);
  }
}

/**
 * section: current/components/message
 * title: Message
 *
 * activateComponent: radius-component-message
 *
 * description: |
 *   Message box for various type of messages.
 *
 *   The component requires the `.message` class for the default info message. For other types of messages (error, warnings, success) you can add one of the classes listed below.
 *
 * modifiers:
 *   message--info: info messages
 *   message--error: error messages
 *   message--warning: warning message
 *   message--success: success message
 *
 * markup: current/components/message/message
 */


$_message: (
  break-point: mobile-large,
  color: get-color(magenta, light),
  color-error: get-color(red),
  color-success: get-color(green),
  color-warning: get-color(yellow),
  icon-padding: size(5)
);


@mixin message-padding-left {
  @include breakpoint(from get-var($_message, break-point)) {
    padding-left: get-var($_message, icon-padding);
  }
}




@mixin radius-component-message {
  .message {
    position: relative;

    padding: size(.5 1);
    margin-bottom: size(2);

    background: get-color(white);
    box-shadow: 0 1px 1px 0 rgba(get-color(black), .1);

    @include breakpoint(to get-var($_message, break-point)) {
      text-align: center;

      border-bottom: 4px solid get-var($_message, color);


      &:before {
        margin: size(0 auto 1);
      }
    }


    @include breakpoint(from get-var($_message, break-point)) {
      border-left: 4px solid get-var($_message, color);


      &:before {
        position: absolute;
        top: 0;
        bottom: 0;
        left: size(1);

        margin: auto 0;
      }
    }


    &:before {
      @extend .fci-icon !optional;

      display: block;
      height: size(2.5);

      font-size: size(2.5);
      line-height: size(2.5);
      color: get-var($_message, color);
    }
  }


  .message__title {
    @include font(x-large);

    display: block;
    padding: 0;
    margin-bottom: size(.5);

    font-weight: get-const(config, font-weight-light);
  }


  .message--info {
    @include message-padding-left;


    &:before {
      @extend .fci-info-circled !optional;
    }
  }


  .message--error {
    @include message-padding-left;


    @include breakpoint(to get-var($_message, break-point)) {
      border-bottom-color: get-var($_message, color-error);
    }


    @include breakpoint(from get-var($_message, break-point)) {
      border-left: 4px solid get-var($_message, color-error);
    }


    &:before {
      @extend .fci-attention !optional;

      color: get-var($_message, color-error);
    }
  }


  .message--warning {
    @include message-padding-left;

    @include breakpoint(to get-var($_message, break-point)) {
      border-bottom-color: get-var($_message, color-warning);
    }


    @include breakpoint(from get-var($_message, break-point)) {
      border-left: 4px solid get-var($_message, color-warning);
    }


    &:before {
      @extend .fci-attention !optional;

      color: get-var($_message, color-warning);
    }
  }


  .message--success {
    @include message-padding-left;


    @include breakpoint(to get-var($_message, break-point)) {
      border-bottom-color: get-var($_message, color-success);
    }


    @include breakpoint(from get-var($_message, break-point)) {
      border-left: 4px solid get-var($_message, color-success);
    }


    &:before {
      @extend .fci-tick !optional;

      color: get-var($_message, color-success);
    }
  }
}

/**
 * section: current/components/notification
 * title: Notification
 *
 * activateComponent: radius-component-notification
 *
 * description: |
 *   Notification for short, snappy feedback for the user. For more elaborate messages (with title), see the messages component.
 *
 *   The component requires the `.notification` class for the default info notification. For other types of notifications (error, warnings, success) you can add one of the classes listed below.
 *
 * modifiers:
 *   notification--error: error notifications
 *   notification--warning: warning notification
 *   notification--success: success notification
 *
 * markup: current/components/notification/notification
 */


$_notification: (
  breakpoint: mobile-medium,
  size-big: size(3),
  size-small: size(2)
);


@function notification($val) {
  @return get-var($_notification, $val);
}


@mixin radius-component-notification {
  .notification {
    display: flex;
    align-items: center;
    padding: size(1);
    margin-bottom: size(1.5);

    color: get-color(grey-cool, dark);

    background: get-color(white);
    border: 0;


    &:before {
      @extend .fci-icon !optional;
      @include font(small);

      display: none;
      flex-shrink: 0;
      float: left; // fallback
      width: notification(size-small);
      height: notification(size-small);
      margin-right: size(1);

      line-height: notification(size-small);
      color: get-color(white);
      text-align: center;

      border-radius: 50%;

      @include breakpoint(from notification(breakpoint)) {
        @include font(large);

        width: notification(size-big);
        height: notification(size-big);
        margin-right: size(1.5);

        line-height: notification(size-big);
      }
    }

    &:first-child {
      border-top: 0;
    }
  }


  .notification--success {
    background: rgba(get-color(green), .1);


    &:before {
      @extend .fci-tick !optional;

      display: block;

      background: get-color(green, dark);
    }
  }


  .notification--error {
    background: rgba(get-color(orange-red), .1);


    &:before {
      @extend .fci-close !optional;

      display: block;

      background: get-color(orange-red);
    }
  }


  .notification--warning {
    background: rgba(get-color(yellow), .1);


    &:before {
      @extend .fci-pencil !optional;

      display: block;

      background: get-color(yellow);
    }
  }


  .notification--narrow {
    max-width: 600px;
    margin-right: auto;
    margin-left: auto;
  }
}

$_pull-content-widths: (
  small: last(get-columns-widths(7 5)),
  medium: last(get-columns-widths(7 6))
);

@function format-width($width) {
  @return map-get($_pull-content-widths, $width) * 1%;
}

@mixin radius-component-pull-content {
  .pull-content {
    display: flex;
    flex-direction: column;

    &:after {
      display: block;
      clear: both;
      content: '';
    }
  }

  .pull-content--sm,
  .pull-content--m {
    @include breakpoint(from tablet-medium) {
      display: block;
    }
  }

  .pull-content__pull-quote {
    @include font(large);

    order: 2;

    padding-top: size(1);
    padding-bottom: size(1);
    margin-top: size(1);
    margin-bottom: size(.5);

    font-weight: get-const(config, font-weight-bold);
    color: get-color(grey-cool, darker);

    border-top: 1px solid get-color(grey-cool, base);
    border-bottom: 1px solid get-color(grey-cool, base);
  }

  .pull-content--sm .pull-content__pull-quote,
  .pull-content--m .pull-content__pull-quote {
    @include breakpoint(from tablet-medium) {
      float: right;
      margin-top: 0;
    }
  }

  .pull-content--sm .pull-content__pull-quote {
    @include breakpoint(from tablet-medium) {
      width: format-width(small);
      margin-left: size(1);
    }
  }

  .pull-content--m .pull-content__pull-quote {
    @include breakpoint(from tablet-medium) {
      width: format-width(medium);
      margin-left: size(1);
    }
  }
}


/*
 * section: current/components/pull-content
 * title: Pull-Content
 *
 * activateComponent: radius-component-pull-content
 *
 * description: |
 *   This component allows for a content box that toggles between full width and float depending on screen-size.<br><br>
 *
 *   It consists of three basic elements:<br>
 *   pull-content-wrap<br>
 *   pull-content<br>
 *   main-content (optional)<br><br>
 *
 *   The main content can be further customised by adding more classes or replacing the `.main-content` class altogether as it isn't used by Radius.<br><br>
 *
 *   The breakpoint is `tablet-medium`
 *
 *
 * modifiers:
 *   pull-content--sm: Add this modifier to the pull-content-wrap element to create a small pull-content container (Golden Ratio => 7 5)
 *   pull-content--m: Add this modifier to the pull-content-wrap element to create a medium pull-content container (Golden Ratio => 7 6)
 *
 * markup: current/components/pull-content/pull-content
 */

/*
 * section: current/components/review-details
 * title: Review Details
 *
 * activateComponent: radius-component-review-details
 *
 * description: |
 *   This component displays information back to the user either for being copied (bank transfer details) or for reviewing ("Here are your details, please review").
 *
 *   This component should be used inside a larger component that has a background that is not white. Ideally, the context should have a light grey background.
 *
 * markup: current/components/review-details/review-details
 */


@mixin radius-component-review-details {
  .review-details__title {
    @include font(small);

    position: relative;
    margin-bottom: size(.5);

    color: get-color(grey-cool, darker);
  }


  .review-details__content {
    @include font(large);

    padding: size(.5);
    margin: size(0 0 1);
    text-align: center;
    text-transform: uppercase;

    background-color: get-color(grey-warm, lighter);
  }
}

/**
 * section: current/components/sidenav
 * title: Sidenav
 *
 * activateComponent: radius-component-sidenav
 *
 * description: |
 *   Has class `side-nav--no-sticky` which can be used to remove the default `position: fixed`.
 *   Mobile version is hidden with JS disabled as funcitonality is useless
 *   First link should always have `is-active` class by default
 *
 * markup: current/components/sidenav/sidenav
 */


$_sidenav: (
  bp-small: mobile-large,
  bp-medium: desktop-large,
  border-radius: 5px,
  bullet-size: size(.5),
  color-border: get-color(grey-cool, light),
  color-default-nav-item-bg: get-color(white),
  color-default-text: get-color(blue),
  color-active-bg: get-color(magenta, light),
  color-hover-bg: get-color(blue),
  color-hover-text: get-color(white),
  color-triangle: get-color(grey-cool, dark)
);


@mixin side-nav-item-base {
  border-top-right-radius: get-var($_sidenav, border-radius);
  border-bottom-right-radius: get-var($_sidenav, border-radius);
  box-shadow: 1px 1px 2px rgba(get-color(black), .2);
}


@mixin side-nav-item-active-colors {
  color: get-var($_sidenav, color-hover-text);

  background-color: get-var($_sidenav, color-active-bg);
}

@mixin side-nav-item-hover-colors {
  color: get-var($_sidenav, color-hover-text);

  background-color: get-var($_sidenav, color-hover-bg);
}




@mixin radius-component-sidenav {
  .no-js .side-nav {
    @include breakpoint(to get-var($_sidenav, bp-small)) {
      display: none;
    }
  }


  .side-nav {
    position: fixed;
    bottom: 0;
    z-index: 100;

    width: 100%;
    height: size(3);

    overflow: hidden;
    background-color: get-var($_sidenav, color-default-nav-item-bg);
    transition: height .1s linear;


    @include breakpoint(from get-var($_sidenav, bp-small)) {
      position: absolute;
      bottom: auto;

      width: auto;
      height: auto;

      background-color: transparent;
      border: 0;
    }


    @include breakpoint(from get-var($_sidenav, bp-medium)) {
      overflow: visible;
    }


    &.is-sticky {
      position: absolute;


      @include breakpoint(from get-var($_sidenav, bp-small)) {
        position: fixed;
      }
    }


    &.is-active {
      @include breakpoint(to get-var($_sidenav, bp-small)) {
        height: 100%;

        background-color: get-color(white);


        &:before {
          @include font(x-large);

          position: absolute;
          top: size(2.5);

          width: 100%;

          text-align: center;
          content: attr(data-mobile-heading);
        }
      }
    }
  }


  .side-nav__navigation {
    @include breakpoint(to get-var($_sidenav, bp-small)) {
      @include prefix(transform, translateX(-50%) translateY(-50%), webkit ms);

      position: absolute;
      top: 50%;
      left: 50%;

      text-align: center;
    }
  }


  .side-nav__item {
    @include font(x-large);

    position: relative;

    float: left;
    width: 100%;
    padding: size(1);
    clear: left;

    color: get-var($_sidenav, color-default-text);
    text-decoration: none;
    white-space: nowrap;

    background-color: get-var($_sidenav, color-default-nav-item-bg);


    @include breakpoint(from get-var($_sidenav, bp-small)) {
      @include font(medium);

      width: auto;
      min-width: size(2);
      padding: size(.5) size(.5) size(.5) size(1.5);
      margin-bottom: size(.5);

      text-indent: -500px;

      background-color: transparent;
    }


    @include breakpoint(from get-var($_sidenav, bp-medium)) {
      @include side-nav-item-base;

      width: auto;

      text-indent: 0;

      background-color: get-var($_sidenav, color-default-nav-item-bg);
    }


    &:before {
      @include breakpoint(from get-var($_sidenav, bp-small)) {
        position: absolute;
        top: 50%;
        left: size(.5);

        width: get-var($_sidenav, bullet-size);
        height: get-var($_sidenav, bullet-size);
        margin-top: negative(get-var($_sidenav, bullet-size) / 2);

        border: 2px solid;
        border-radius: 50%;

        content: '';
      }
    }


    &:hover,
    &:active {
      text-decoration: none;


      @include breakpoint(from get-var($_sidenav, bp-small)) {
        @include side-nav-item-base;
        @include side-nav-item-hover-colors;

        font-weight: get-const(config, font-weight-regular);
        text-indent: 0;


        // bullet
        &:before {
          background-color: get-var($_sidenav, color-hover-text);
        }
      }
    }


    &.is-active {
      @include breakpoint(from get-var($_sidenav, bp-small)) {
        @include side-nav-item-base;
        @include side-nav-item-active-colors;

        font-weight: get-const(config, font-weight-regular);
        text-indent: 0;


        // bullet
        &:before {
          background-color: get-var($_sidenav, color-hover-text);
        }
      }
    }
  }


  .side-nav:hover .side-nav__item,
  .side-nav:active .side-nav__item {
    @include breakpoint(from get-var($_sidenav, bp-small) to get-var($_sidenav, bp-medium)) {
      @include side-nav-item-base;

      text-indent: 0;
      background-color: get-var($_sidenav, color-default-nav-item-bg);


      &:hover,
      &:active {
        @include side-nav-item-hover-colors;
      }


      &.is-active {
        @include side-nav-item-active-colors;
      }
    };
  }


  // close button mobile
  .side-nav__toggle {
    @include font(large);

    position: absolute;
    bottom: 0;
    left: 0;
    z-index: 100;

    display: none;
    width: 100%;
    height: size(3);
    padding: size(.5) size(1);

    border: 1px solid get-var($_sidenav, color-border);


    @include breakpoint(to get-var($_sidenav, bp-small)) {
      display: block;
    }


    &:focus {
      outline: none;
    }
  }


  .side-nav.is-active .side-nav__toggle {
    border-top: 0;
  }



  .side-nav__triangle {
    margin-left: size(.5);


    // down arrow [mobile view only]
    &:after {
      @include triangle(up, get-var($_sidenav, color-triangle), 10px);

      display: inline-block;

      content: '';
    }
  }


  .side-nav.is-active .side-nav__triangle,
  .side-nav.is-active .side-nav__label,
  .side-nav__close {
    display: none;
  }


  .side-nav.is-active .side-nav__close {
    display: initial;
  }
}

/**
 * section: current/components/step-card
 * title: Step card
 *
 * activateComponent: radius-component-step-card
 *
 * description: |
 *   The step card is a pattern built for forms with multiple logical parts but
 *   also has a static modifier to be used without its javascript counterpart.
 *
 *   <br>
 *   The main components are:
 *   - `step-card__wrap`: This wrapper is needed if there are multiple cards in a
 *   series. This is not needed for `step-card--static`.
 *   - `step-card`: The main element. This can have the modifiers such as
 *   `--narrow` and `--static`.
 *   - `step-card__content`: The meat of the content. Contains the `__title`,
 *   `__steps`, `__def-list`, `__intro` and general content.
 *   - `step-card__buttons`: The action buttons to continue through steps
 *
 *   <br>
 *   If the content is narrower than full width, such as for a nested form, you
 *   you can apply the `step-card--narrow` modifier.
 *   <br>
 *   For the static card you can use `step-card--static`.
 *   <br>
 *   There is a `step-card--warning` class to apply a yellow `border-left`. This
 *   can be used to draw attention to a specific card. For example, in transfer
 *   ins we use it to emphasise the 'Check details' step.
 *   ```
 *   <div class="sg-step-card-wrap step-card__wrap" data-step-wrap data-step-text="Step ${step} of ${total}">
 *     <section class="step-card" data-step>
 *       <div class="step-card__content">
 *         <span class="step-card__steps" data-step-count></span>
 *         <h2 class="step-card__title">Check your personal details</h2>
 *
 *         <dl class="step-card__def-list">
 *           <dt>Name</dt>
 *           <dd>Craig David</dd>
 *         </dl>
 *       </div>
 *
 *       <div class="step-card__buttons">
 *         <a href="javascript://void(0)" class="btn--secondary btn--small btn--full">Edit my details</a>
 *         <a href="javascript://void(0)" class="btn--primary btn--small btn--full" data-step-advance>These are correct</a>
 *       </div>
 *     </section>
 *   </div>
 *   ```
 *
 * layout: current/components/step-card/step-card
 */


@mixin radius-component-step-card {
  .step-card__wrap {
    display: flex;
    flex-direction: column;
    justify-content: center;

    padding-bottom: size(9.5);
  }


  .step-card {
    width: 100%;
    padding: size(2) size(1);
    margin-bottom: size(1);

    color: get-color(grey-cool, dark);
    background: get-color(white);
    box-shadow: 0 2px 8px 0 rgba(get-color(black),.3);


    @include breakpoint(from mobile-medium) {
      padding: size(2);
    }
  }


  .step-card--warning {
    border-left: size(.25) solid get-color(yellow);
  }


  .step-card--static {
    max-width: 600px;
    margin: 0 auto;

    background-color: get-color(grey-warm, base);
    box-shadow: none;


    @include breakpoint(from mobile-medium) {
      padding-right: size(1);
      padding-left: size(1);
    }


    @include breakpoint(from tablet-small) {
      padding-right: size(3);
      padding-left: size(3);
    }
  }


  .step-card__intro {
    width: 100%;
    margin-bottom: size(1.5);
  }


  .step-card__intro ul {
    padding-left: size(1);
    margin-bottom: size(1);
  }


  .step-card__content {
    @include breakpoint(from mobile-medium) {
      padding-right: size(2.5);
      padding-left: size(2.5);
    }
  }


  .step-card--narrow .step-card__content {
    padding-right: size(1);
    padding-left: size(1);


    @include breakpoint(from mobile-medium) {
      padding-right: size(6);
      padding-left: size(6);
    }
  }


  .step-card.is-inactive {
    position: absolute;
    top: 100%;
    left: 0;

    margin-top: negative(size(9.5));

    opacity: .5;
  }


  .step-card__steps {
    @include font(small);

    display: block;
    margin-bottom: size(.5);

    color: get-color(grey-warm, darker);
    text-align: center;
    text-transform: uppercase;
  }


  .step-card__title {
    @include font(x-large);

    margin-bottom: size(1.5);

    font-weight: get-const(config, font-weight-regular);
    color: get-color(grey-cool, dark);
    text-align: center;


    @include breakpoint(from mobile-medium) {
      @include font(2x-large);
    }
  }


  .step-card__def-list {
    margin: size(0 0 2);
  }


  .step-card__def-list dt {
    padding: 0;
    margin: 0;

    font-weight: get-const(config, font-weight-light);
  }


  .step-card__def-list dd {
    @include font(large);

    margin: size(0 0 1);
  }


  .step-card__buttons {
    // disable linter because display: inline is a fallback for when flex is not supported
    // scss-lint:disable DuplicateProperty
    display: inline;
    display: flex;
    // scss-lint:enable DuplicateProperty
    flex-wrap: wrap;
    justify-content: space-between;
  }


  .step-card__buttons a,
  .step-card__buttons input[type="submit"] {
    @include breakpoint(from mobile-large) {
      width: calc(50% - #{size(.5)});
    }
  }
}

/**
 * section: current/components/table
 * title: Table
 *
 * activateComponent: radius-component-table
 *
 * description: |
 *   It is very important to make sure all classes and `[data]` attributes are set just like in the example.
 *
 *   There are two variations of responsive tables available, depending on the behaviour on small screens:
 *     - vertical - on small screens, the columns are transformed into cards
 *     - horizontal - on small screens, the rows are transformed into cards with the first `<td>` (that must contain `data-td-title`) as the title of the card
 *
 *   The table implementation is using `data-td-label` as the title of the card and `data-table-hide` for elements that will be hidden on small screens.
 *
 *   The implementation is not dependent on the `table` tag, but should be kept like that for semantic reasons. Also, the `<div class="table"/>` wrapper is required.
 *
 */


/**
 * section: current/components/table/table-vertical
 * title: Table - column to card
 *
 * description: |
 *   This implementation splits the table on cards based on the columns of the table. The title of each card will remain the `<th>`.
 *
 *   `data-td-label` should be set to be the same as the content of the first column to ensure that the title of the card and rows are the same across all screen widths.
 *
 *   On small screens we want to hide the column header, so we need to add `data-table-hide` on the first `<td>` or `<th>` from each `<tr>`.
 *
 * markup: current/components/table/table-vertical
 */


/**
 * section: current/components/table/table-horizontal
 * title: Table - row to card
 *
 * description: |
 *   Example of table usage
 *
 *   This implementation splits the table on cards based on the rows of the table. The title of each card should be the content of the first `<td data-td-title>`.
 *
 *   `data-td-label` should be set to be the same as the corresponding `<th>` to ensure that the title of the card and rows are the same across all screen widths.
 *
 *   On small screens we want to hide the `<thead>` because the information there will be repeated on the cards, so we need to add `data-table-hide` on it.
 *
 * modifiers:
 *   table--inline: on small screens the cards are in a row (similar to vertical table)
 *   table--label-row: on small screens the label and content fill one `<tr>`
 *   table--label-inline: on small screens we try to fit as many label / content pairs as possible
 *
 * markup: current/components/table/table-horizontal
 */


$_table: (
  bp-medium: tablet-small,
  border-color: get-color(grey-warm),
  label-color: get-color(grey-warm, darkest),
  shadow: 0 2px 0 0 rgba(get-color(black), .05)
);


@function table($var) {
  @return map-get($_table, $var);
}


%table-wrapper {
  width: 100%;
  padding-bottom: size(2.5);

  overflow: auto;
}


%table-label-row {
  @include to(table(bp-medium)) {
    text-align: right;
  }
}


%table-label-row:before {
  @include to(table(bp-medium)) {
    float: left;
  }
}


// general table
@mixin radius-component-table {
  .table {
    margin-bottom: size(2.5);
  }


  .table__content {
    display: table;
    width: 100%;

    text-align: left;

    border: 0;
  }


  .table__head {
    display: table-header-group;

    font-weight: get-const(config, font-weight-bold);
  }


  .table__body {
    display: table-row-group;
  }


  .table__row {
    display: table-row;


    @include from(table(bp-medium)) {
      border-bottom: 1px solid table(border-color);
    }
  }


  .table__row:hover {
    @include from(table(bp-medium)) {
      background: transparentize(get-color(black), .95);
    }
  }


  .table__cell {
    display: table-cell;


    @include from(table(bp-medium)) {
      padding: size(.5 1);
    }
  }


  .table__cell:before {
    @include font(small, false);

    line-height: size(1.5);
    color: table(label-color);


    @include to(table(bp-medium)) {
      content: attr(data-td-label);
    }
  }


  [data-table-hide] {
    @include to(table(bp-medium)) {
      display: none;
    }
  }


  // vertical
  .table--vertical {
    @extend %table-wrapper !optional;
  }


  .table--vertical .table__content {
    @include to(table(bp-medium)) {
      width: auto;


      border-collapse: separate;
      border-spacing: size(2 0);
      table-layout: fixed;
    }
  }


  .table--vertical .table__cell {
    @extend %table-label-row;


    @include to(table(bp-medium)) {
      min-width: size(16);
      padding: size(.5 1);

      border-right: 1px solid table(border-color);
      border-left: 1px solid table(border-color);
    }
  }


  .table--vertical .table__row:last-child:not(.table__row--head) .table__cell {
    @include to(table(bp-medium)) {
      border-bottom: 1px solid table(border-color);
      box-shadow: table(shadow);
    }
  }


  .table--vertical .table__cell--head {
    @include to(table(bp-medium)) {
      text-align: center;

      border-top: 1px solid table(border-color);
    }
  }


  // horizontal
  .table--horizontal .table__content,
  .table--horizontal .table__body,
  .table--horizontal .table__row,
  .table--horizontal .table__cell {
    @include to(table(bp-medium)) {
      display: block;
      width: 100%;
    }
  }


  .table--horizontal .table__row {
    @include to(table(bp-medium)) {
      max-width: size(26);
      min-width: size(16);
      padding: size(1);
      margin: size(0 auto 1);

      border: 1px solid table(border-color);
      box-shadow: table(shadow);
    }
  }


  .table__cell[data-td-title] {
    @include to(table(bp-medium)) {
      width: 100%;
      margin-bottom: size(1);

      font-weight: get-const(config, font-weight-bold);
      text-align: center;
    }
  }


  // horizontal - inline
  .table--inline {
    @extend %table-wrapper !optional;
  }


  .table--inline .table__body {
    @include to(table(bp-medium)) {
      display: flex;
    }
  }


  .table--inline .table__row {
    @include to(table(bp-medium)) {
      margin: size(0 1);
    }
  }


  // horizontal label row
  .table--label-row .table__cell {
    @extend %table-label-row !optional;
  }


  // horizontal label inline
  .table--label-inline .table__row {
    @include to(table(bp-medium)) {
      display: flex;
      flex-wrap: wrap;
    }
  }


  .table--label-inline [data-td-label] {
    @include to(table(bp-medium)) {
      width: auto;
      padding: size(0 1 1);
    }
  }


  .table--label-inline [data-td-label]:before {
    @include to(table(bp-medium)) {
      display: block;
    }
  }
}

/**
 * section: current/components/tabs
 * title: Tabs component
 *
 * activateComponent: radius-component-tabs
 *
 * description: |
 *   On mobile, or when the JavaScript is not present, the tab component 'unrolls' and is presented as a list of sections, rather than tabs.
 *
 * markup: current/components/tabs/tabs
 */


$_tabs: (
  collapsed-breakpoint: mobile-large,
  tablist-border-size: 5px,
  height: 88px
);


@function tabs($key) {
  @return map-get($_tabs, $key);
}


@mixin radius-component-tabs {
  .tablist {
    @include font(large);
    @include list-unstyled;

    display: none;
    text-align: center;


    .has-js & {
      @include breakpoint(from tabs(collapsed-breakpoint)) {
        display: table;
      }
    }
  }


  .tablist li {
    display: table-cell;
    width: 1%;
    vertical-align: middle;
  }


  .tablist__item {
    // disable linter because display: block is a fallback for when flex is not supported
    // scss-lint:disable DuplicateProperty
    display: block;
    display: flex;
    // scss-lint:enable DuplicateProperty
    align-items: center;
    justify-content: center;
    height: tabs(height);

    padding-right: size(2);
    padding-left: size(2);
    border-bottom: tabs(tablist-border-size) solid get-color(blue, lighter);


    &:hover,
    &:focus {
      text-decoration: none;

      background: transparentize(get-color(blue, lighter), .5);
      outline: 0;
    }


    &.is-selected {
      color: get-color(grey-cool, darker);
      border-bottom-color: get-color(blue, base);
    }
  }


  .tablist__item.tablist__item--transparent {
    background: transparent;
  }


  .tabpanel {
    padding: size(2 1.5);
    border-bottom: 1px solid get-color(grey-cool, light);


    .has-js & {
      @include breakpoint(from tabs(collapsed-breakpoint)) {
        background: get-color(white);
        border-bottom: 0;
      }
    }
  }


  .tabs.has-js .is-hidden {
    @include breakpoint(from tabs(collapsed-breakpoint)) {
      display: none;
    }
  }


  .tabpanel__header {
    @include font(large);

    text-align: center;


    .has-js & {
      @include breakpoint(from tabs(collapsed-breakpoint)) {
        display: none;
      }
    }
  }
}

@mixin carousel-transforms($scale, $translate-x) {
  transform: scale($scale) translateX($translate-x);
}



/**
 * section: current/components/carousel
 * title: Carousel
 *
 * activateComponent: radius-component-carousel
 *
 * description: |
 *   Carousel should be used as a more iconic (as in distinctive visual signature) alternative to a list of elements. This component lends itself to situations where a list of comparable options is presented, like a list of loan terms. To help illustrate the number of options this component should be used along with the indicator component.
 *
 *   ### Environment specific behaviour:
 *   On devices with coarse pointer accuracy, swipe gesture can be used to go to the next or previous carousel item.
 *   When JavaScript or flexbox are not available, this components renders as a list of elements which wraps.
 *
 *   ### Limitations:
 *   This component is best used with a limited amount of items (3-10) to both make use of it's visual appeal (less than 3 items) and avoid information overload (more than 10 items).
 *   Additionally, the component should not be placed in the vicinity of other components making use of perspective.
 *
 * markup: current/components/carousel/carousel
 */

$_carousel: (
  zoom: .85,
  child-width: size(9),
  desktop-overlap: 85%,
  overlap: 70%,
  opacity: .6
);


@function carousel($key) {
  @return map-get($_carousel, $key);
}

@mixin radius-component-carousel {
  .carousel {
    position: relative;

    display: flex;
    flex-flow: row wrap;
    margin-bottom: size(.5);

    @include breakpoint(from mobile-medium) {
      margin-bottom: size(1);
    }
  }


  .carousel__item {
    display: inline-block;

    cursor: pointer;
  }


  .has-js {
    .carousel__item {
      @include carousel-transforms(carousel(zoom), negative(carousel(overlap)));

      position: absolute;
      right: 0;
      left: 0;
      z-index: 1;

      width: carousel(child-width);
      margin: 0 auto;

      color: transparentize(get-color(black), carousel(opacity));

      background: get-color(white);

      transition: transform 300ms ease-out, color 300ms ease-out;

      @include breakpoint(from mobile-medium) {
        @include carousel-transforms(pow(carousel(zoom), 2), negative(carousel(desktop-overlap)) * 2);
      }
    }


    .carousel__item.is-selected {
      position: relative;
      z-index: 5;

      transform: scale(1);
    }


    .carousel__item.is-before,
    .carousel__item.is-after {
      z-index: 4;

      color: transparentize(get-color(black), carousel(opacity) * carousel(opacity));
    }


    .carousel__item.is-before {
      @include breakpoint(from mobile-medium) {
        @include carousel-transforms(carousel(zoom), negative(carousel(desktop-overlap)));
      }
    }


    .carousel__item.is-after {
      @include carousel-transforms(carousel(zoom), carousel(overlap));

      @include breakpoint(from mobile-medium) {
        @include carousel-transforms(carousel(zoom), carousel(desktop-overlap));
      }
    }


    .carousel__item.is-after ~ .carousel__item {
      @include carousel-transforms(carousel(zoom), carousel(overlap));

      @include breakpoint(from mobile-medium) {
        @include carousel-transforms(carousel(zoom) * carousel(zoom), carousel(desktop-overlap) * 2);
      }
    }


    .carousel__item.is-after + .carousel__item {
      z-index: 3;
    }

    .carousel__item.is-after + .carousel__item + .carousel__item {
      z-index: 2;
    }
  }
}

/**
 * section: current/components/term-card
 * title: Term card
 *
 * activateComponent: radius-component-term-card
 *
 * description: |
 *   Term card is a more attractive version of a radio button used to present a term and an amount
 *
 * markup: current/components/term-card/term-card
 */

$_term-card: (
  background-color: get-color(blue, lighter),
  border-color: get-color(blue, light),
  text-color: get-color(blue, base),
  width: size(9)
);


@function term-card($key) {
  @return map-get($_term-card, $key);
}


@mixin radius-component-term-card {
  .term-card {
    display: block;
    width: term-card(width);
    padding: size(1);

    line-height: 0;
    text-align: center;

    cursor: inherit;
    border: 1px solid;
    border-radius: size(.5);
  }


  :checked + .term-card {
    color: term-card(text-color);

    background: term-card(background-color);
    border: 1px solid term-card(border-color);
  }


  .term-card__duration {
    @include font(small, size(1.5));

    display: block;

    font-weight: get-const(config, font-weight-bold);
    text-transform: uppercase;
  }


  .term-card__amount {
    @include font(x-large);

    display: block;

    font-weight: get-const(config, font-weight-bold);
  }


  .term-card__unit {
    @include font(small);

    display: block;

    text-transform: uppercase;
  }
}

/**
 * section: current/components/indicator
 * title: Position indicator
 *
 * activateComponent: radius-component-indicator
 *
 * description: |
 *   The indicator is used to show number of associated elements along with the position of the active element. Additionally, it could be used to control the associated element, i.e. jump to element 3 out of 5.
 *
 *   **Environment specific behaviour:**
 *   On desktop (device with fine pointer accuracy), this component allows the user to jump to any other associated element.
 *   Conversely, on device with coarse pointer accuracy, this component allows the use to jump only one step forward, or one step backward with the direction determined by the position of the pointer relative to currently selected dot.
 *
 *   **Limitations:**
 *   This element depends on the availability of flexbox as well as availability of JavaScript. If either of these requirements is not met, the component will be hidden.
 *
 * markup: current/components/indicator/indicator
 */

$_indicator: (
  dot-size: size(.5),
  border-color: get-color(blue, light),
  hit-area: size(1)
);


@function indicator($key) {
  @return map-get($_indicator, $key);
}


@mixin radius-component-indicator {
  .no-flexbox .indicator,
  .indicator {
    display: none;
  }


  .has-js.indicator {
    display: flex;
    justify-content: center;
    margin-top: (indicator(dot-size) - indicator(hit-area)) / 2;
  }


  .indicator__dot {
    display: flex;
    justify-content: center;
    width: indicator(hit-area);
    height: indicator(hit-area);
    padding: 0;

    background: none;
    border: 0;
  }


  .indicator__dot:after {
    display: block;
    width: indicator(dot-size);
    height: indicator(dot-size);

    border: 1px solid indicator(border-color);
    border-radius: 50%;

    content: '';
  }


  .indicator__dot.is-selected:after {
    background: indicator(border-color);
  }
}



@if $radius-activate-all-components {
  @include radius-component-accordion;
  @include radius-component-buttons;
  @include radius-component-form-core;
  @include radius-component-dynamic-number-input;
  @include radius-component-go-to-link;
  @include radius-component-hero;
  @include radius-component-message;
  @include radius-component-notification;
  @include radius-component-pull-content;
  @include radius-component-review-details;
  @include radius-component-sidenav;
  @include radius-component-step-card;
  @include radius-component-table;
  @include radius-component-tabs;
  @include radius-component-carousel;
  @include radius-component-term-card;
  @include radius-component-indicator;
}


// import js-components
// JS Components
//
//
//
// Styleguide js-components

// Steps
//
// This component allows steps to be setup and then 'stepped' through by
// removing the `is-inactive` class from the following 'step'.
//
// There are three parts for the component:
//   - data-step-wrap
//   - data-step
//   - data-step-count (this also requires a template string, data-step-text)
//
// ```
//  <div data-step-wrap data-step-text="Step \${step} of \${total}">
//    <section data-step>
//      <span data-step-count></span>
//      <button data-step-advance>Next</button>
//    </section>
//    <section data-step>
//      <span data-step-count></span>
//      <button data-step-advance>Next</button>
//    </section>
//  </div>
// ```
//
// Styleguide js-components.steps


