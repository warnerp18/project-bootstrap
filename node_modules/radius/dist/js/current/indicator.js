(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('radius/indicator', ['exports', 'lodash/forEach', 'lodash/range', './utils'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('lodash/forEach'), require('lodash/range'), require('./utils'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.forEach, global.range, global.utils);
    global.radiusIndicator = mod.exports;
  }
})(this, function (exports, _forEach, _range, _utils) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createIndicator;

  var _forEach2 = _interopRequireDefault(_forEach);

  var _range2 = _interopRequireDefault(_range);

  var _utils2 = _interopRequireDefault(_utils);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  var JS_CLASS = 'has-js';
  var SELECTED_CLASS = 'is-selected';
  var LENGTH_ATTR = 'data-length';
  var SELECTED_ATTR = 'data-selected-index';

  function createIndicator(element) {
    var model = createModel(element, {
      selectedIndex: parseInt(element.getAttribute(SELECTED_ATTR), 10),
      length: parseInt(element.getAttribute(LENGTH_ATTR), 10)
    });

    renderInitial(element, model);

    element.addEventListener('click', function (event) {
      return onDotClick(model, event);
    });
    element.addEventListener('indicatorselected', function (event) {
      updateDots(element.children, event.detail);
    });

    return model;
  }

  function createModel(emitter, _ref) {
    var selectedIndex = _ref.selectedIndex,
        length = _ref.length;

    var m = {
      selectedIndex: selectedIndex,
      length: length
    };

    return {
      getSelectedIndex: function getSelectedIndex() {
        return m.selectedIndex;
      },
      setSelectedIndex: function setSelectedIndex(index) {
        if (m.selectedIndex === index) {
          return;
        }

        m.selectedIndex = index;
        var event = createSelectedEvent(index);
        emitter.dispatchEvent(event);
      },
      getLength: function getLength() {
        return m.length;
      }
    };
  }

  function renderInitial(element, model) {
    _utils2['default'].addClass(element, JS_CLASS);

    var children = (0, _range2['default'])(model.getLength()).map(function (index) {
      return index === model.getSelectedIndex();
    }).map(function (isSelected) {
      return createIndicatorDot(isSelected);
    });

    element.insertAdjacentHTML('beforeend', children.join(''));
  }

  function onDotClick(model, event) {
    if (_utils2['default'].hasCoarsePointer()) {
      var direction = sign(getElementIndex(event.target) - model.getSelectedIndex());
      model.setSelectedIndex(model.getSelectedIndex() + direction);
    } else {
      model.setSelectedIndex(getElementIndex(event.target));
    }
  }

  function createIndicatorDot() {
    var isSelected = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    var additionalClass = isSelected ? SELECTED_CLASS : '';

    return '<button class="indicator__dot ' + additionalClass + '" type="button" tabindex="-1"></button>';
  }

  function updateDots(children, index) {
    (0, _forEach2['default'])(children, removeClass(SELECTED_CLASS));
    _utils2['default'].addClass(children[index], SELECTED_CLASS);
  }

  function getElementIndex(element) {
    return [].concat(_toConsumableArray(element.parentNode.children)).indexOf(element);
  }

  function createSelectedEvent(index) {
    return new CustomEvent('indicatorselected', {
      detail: index,
      bubbles: true
    });
  }

  function removeClass(className) {
    return function (el) {
      return _utils2['default'].removeClass(el, className);
    };
  }

  function sign(value) {
    if (value > 0) {
      return 1;
    } else if (value < 0) {
      return -1;
    }

    return 0;
  }
});