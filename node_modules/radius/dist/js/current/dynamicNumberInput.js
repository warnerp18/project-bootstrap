(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('radius/dynamicNumberInput', ['exports', './utils', 'lodash/forEach'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('./utils'), require('lodash/forEach'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.utils, global.forEach);
    global.radiusDynamicNumberInput = mod.exports;
  }
})(this, function (exports, _utils, _forEach) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.COMPONENT_SELECTOR = undefined;
  exports.default = createDynamicNumberInput;

  var _utils2 = _interopRequireDefault(_utils);

  var _forEach2 = _interopRequireDefault(_forEach);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var ROOT_SELECTOR = '.js-dynamic-number-input';
  var INPUT_SELECTOR = '.js-input';
  var SUBMIT_SELECTOR = '.js-submit';
  var CLEAN_CLASS = 'is-clean';
  var ERROR_CLASS = 'is-error';
  var ENTER = 13;

  var COMPONENT_SELECTOR = exports.COMPONENT_SELECTOR = ROOT_SELECTOR;
  function createDynamicNumberInput(element) {
    var view = {
      root: element,
      inputField: element.querySelector(INPUT_SELECTOR),
      submitButton: element.querySelectorAll(SUBMIT_SELECTOR)
    };

    var model = createModel(element, {
      minValue: element.getAttribute('data-min-value'),
      maxValue: element.getAttribute('data-max-value'),
      value: element.getAttribute('data-default')
    });

    _utils2['default'].addEventListener(view.inputField, 'input', function () {
      var numberValue = fromCommaSeparated(view.inputField.value);
      model.setValue(numberValue);
    });

    _utils2['default'].addEventListener(element, 'modelupdated', function () {
      return render(model, view);
    });
    _utils2['default'].addEventListener(view.inputField, 'blur', unless(model.isValid, function () {
      return showErrorMessage(view);
    }));
    _utils2['default'].addEventListener(view.inputField, 'keydown', ifEnter(onSubmit(model, view)));

    (0, _forEach2['default'])(view.submitButton, function (item) {
      _utils2['default'].addEventListener(item, 'click', onSubmit(model, view));
    });

    initialize(view);

    return model;
  }

  function createModel(emitter, initialValues) {
    var model = {
      minValue: parseInt(initialValues.minValue, 10),
      maxValue: parseInt(initialValues.maxValue, 10),
      value: parseInt(initialValues.value, 10),
      cursorPosition: 0
    };

    return {
      getValue: function getValue() {
        return model.value;
      },
      getCursorPosition: function getCursorPosition() {
        return model.cursorPosition;
      },
      setCursorPosition: function setCursorPosition(value) {
        model.cursorPosition = value;
      },
      setValue: function setValue(value) {
        model.value = value;
        emitter.dispatchEvent(modelUpdated());
      },
      isValid: function isValid() {
        return model.minValue <= model.value && model.value <= model.maxValue;
      }
    };
  }

  function render(model, view) {
    var formattedValue = toCommaSeparated(model.getValue());
    storeCursorPosition(model, view);
    view.inputField.value = formattedValue;
    view.inputField.size = formattedValue.length;
    restoreCursorPosition(model, view);

    hideErrorMessage(view);
    showSubmitButton(view);
  }

  function onSubmit(model, view) {
    return function (event) {
      if (model.isValid()) {
        hideSubmitButton(view);
      } else {
        event.preventDefault();
        showErrorMessage(view);
      }
    };
  }

  function initialize(view) {
    view.root.dispatchEvent(modelUpdated());
    hideSubmitButton(view);
  }

  function modelUpdated() {
    return new CustomEvent('modelupdated');
  }

  function fromCommaSeparated(string) {
    return Number(string.replace(/\D/g, ''));
  }

  function toCommaSeparated(number) {
    return number.toLocaleString().split('.')[0];
  }

  function storeCursorPosition(model, view) {
    model.setCursorPosition(view.inputField.value.length - view.inputField.selectionStart);
  }

  function restoreCursorPosition(model, view) {
    var cursorPosition = view.inputField.value.length - model.getCursorPosition();
    view.inputField.setSelectionRange(cursorPosition, cursorPosition);
  }

  function showSubmitButton(view) {
    _utils2['default'].removeClass(view.root, CLEAN_CLASS);
  }

  function hideSubmitButton(view) {
    _utils2['default'].addClass(view.root, CLEAN_CLASS);
  }

  function showErrorMessage(view) {
    _utils2['default'].addClass(view.root, ERROR_CLASS);
  }

  function hideErrorMessage(view) {
    _utils2['default'].removeClass(view.root, ERROR_CLASS);
  }

  function ifEnter(fn) {
    return function (event) {
      if (event.key === ENTER) {
        fn(event);
      }
    };
  }

  function unless(cond, then) {
    return function () {
      if (!cond()) {
        then();
      }
    };
  }
});