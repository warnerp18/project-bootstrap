(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('radius/utils', ['exports', 'lodash/without'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('lodash/without'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.without);
    global.radiusUtils = mod.exports;
  }
})(this, function (exports, _without) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _without2 = _interopRequireDefault(_without);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var TABLET_LARGE = 980;

  var utils = {
    addEventListener: function addEventListener(element, eventName, callback, isCapturing) {
      if (!element || !element.addEventListener) {
        return;
      }
      element.addEventListener(eventName, callback, isCapturing);
    },
    addClass: function addClass(element, className) {
      if (!element) {
        return;
      }

      if (element.classList) {
        element.classList.add(className);
      } else {
        // Do not add duplicate class names
        if (element.className.indexOf(className) === -1) {
          element.className += ' ' + className;
        }
      }
    },
    removeClass: function removeClass(el) {
      for (var _len = arguments.length, classNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        classNames[_key - 1] = arguments[_key];
      }

      var element = el;
      var classArr = element.className.split(' ');

      element.className = _without2['default'].apply(undefined, [classArr].concat(classNames)).join(' ');
    },
    hasClass: function hasClass(el, className) {
      var element = el;
      var classArr = element.className.split(' ');

      if (element.classList) {
        return element.classList.contains(className);
      }

      if (classArr.indexOf(className) === -1) {
        return false;
      }
      return true;
    },
    textContent: function textContent(el, text) {
      var element = el;
      if ('textContent' in document.body) {
        element.textContent = text;
      } else {
        element.innerText = text;
      }
    },
    hasAttribute: function hasAttribute(el, attribute) {
      if (!el.hasAttribute) {
        return false;
      }

      return el.hasAttribute(attribute);
    },
    toggleClass: function toggleClass(element, className, force) {
      if (element.classList) {
        element.classList.toggle(className, force);
      } else {
        if (utils.hasClass(element, className)) {
          utils.removeClass(element, className);
        } else {
          utils.addClass(element, className);
        }
      }
    },
    hasCoarsePointer: function hasCoarsePointer() {
      if (window.matchMedia) {
        return window.matchMedia('(pointer: coarse)').matches;
      }

      return window.screen.width < TABLET_LARGE;
    }
  };

  exports['default'] = utils;
});