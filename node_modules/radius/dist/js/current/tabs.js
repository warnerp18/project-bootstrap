(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('radius/tabs', ['exports', 'lodash/forEach', 'lodash/indexOf', 'lodash/clamp', 'lodash/includes', './utils'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('lodash/forEach'), require('lodash/indexOf'), require('lodash/clamp'), require('lodash/includes'), require('./utils'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.forEach, global.indexOf, global.clamp, global.includes, global.utils);
    global.radiusTabs = mod.exports;
  }
})(this, function (exports, _forEach, _indexOf, _clamp, _includes, _utils) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function () {
    var components = document.querySelectorAll(COMPONENT_SELECTOR);
    (0, _forEach2['default'])(components, createTabComponent);
  };

  var _forEach2 = _interopRequireDefault(_forEach);

  var _indexOf2 = _interopRequireDefault(_indexOf);

  var _clamp2 = _interopRequireDefault(_clamp);

  var _includes2 = _interopRequireDefault(_includes);

  var _utils2 = _interopRequireDefault(_utils);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var COMPONENT_SELECTOR = '.js-tabs';
  var TAB_SELECTOR = '.js-tab';
  var PANEL_SELECTOR = '.js-tabpanel';
  var TABLIST_SELECTOR = '.js-tablist';

  var ARIA_HIDDEN = 'aria-hidden';
  var ARIA_SELECTED = 'aria-selected';
  var IS_HIDDEN = 'is-hidden';
  var IS_SELECTED = 'is-selected';
  var JS_PRESENT = 'has-js';
  var TRANSPARENT_BG = 'tablist__item--transparent';

  var LEFT_ARROW = 37;
  var RIGHT_ARROW = 39;
  var TAB = 9;
  var SHIFT = 'Shift';

  function createTabComponent(element) {
    var component = element;
    var tabs = component.querySelectorAll(TAB_SELECTOR);
    var panels = component.querySelectorAll(PANEL_SELECTOR);
    var tablist = component.querySelector(TABLIST_SELECTOR);

    showPanel(panels, panels[0]);
    selectTab(tabs, tabs[0]);
    addDefaultAria({ tablist: tablist, tabs: tabs, panels: panels });

    (0, _forEach2['default'])(panels, setAttribute('tabindex', 0));

    _utils2['default'].addEventListener(tablist, 'click', function (e) {
      return onTabClicked({ component: component, tabs: tabs, panels: panels }, e);
    });
    _utils2['default'].addEventListener(tablist, 'keydown', function (e) {
      return onKeyDown({ component: component, tabs: tabs, panels: panels }, e);
    });
    _utils2['default'].addClass(component, JS_PRESENT);
  }

  function onTabClicked(_ref, event) {
    var component = _ref.component,
        panels = _ref.panels,
        tabs = _ref.tabs;

    var selectedTab = event.target;
    var selectedPanel = getPanelForTab(component, selectedTab);

    (0, _forEach2['default'])(tabs, removeClass(TRANSPARENT_BG));
    selectedTab.classList.add(TRANSPARENT_BG);

    selectTab(tabs, selectedTab);
    showPanel(panels, selectedPanel);

    event.preventDefault();
  }

  function onKeyDown(_ref2, event) {
    var component = _ref2.component,
        tabs = _ref2.tabs,
        panels = _ref2.panels;

    var keyPressed = event.keyCode;

    if (!shouldHandleKeyEvent(event)) {
      return;
    }

    (0, _forEach2['default'])(tabs, removeClass(TRANSPARENT_BG));

    var currentTab = component.querySelector('.' + IS_SELECTED);
    var tabIndex = (0, _indexOf2['default'])(tabs, currentTab);

    if (keyPressed === LEFT_ARROW) {
      tabIndex -= 1;
    } else if (keyPressed === RIGHT_ARROW) {
      tabIndex += 1;
    }
    tabIndex = (0, _clamp2['default'])(tabIndex, 0, tabs.length - 1);

    var selectedTab = tabs[tabIndex];
    var selectedPanel = getPanelForTab(component, selectedTab);

    if (keyPressed === TAB) {
      selectedPanel.focus();
    } else {
      selectTab(tabs, selectedTab);
      showPanel(panels, selectedPanel);
    }

    event.preventDefault();
  }

  function shouldHandleKeyEvent(event) {
    return (0, _includes2['default'])([LEFT_ARROW, RIGHT_ARROW, TAB], event.keyCode) && !event.getModifierState(SHIFT);
  }

  function showPanel(panels, selectedPanel) {
    (0, _forEach2['default'])(panels, function (panel) {
      _utils2['default'].addClass(panel, IS_HIDDEN);
      panel.setAttribute(ARIA_HIDDEN, true);
    });

    _utils2['default'].removeClass(selectedPanel, IS_HIDDEN);
    selectedPanel.removeAttribute(ARIA_HIDDEN);
  }

  function selectTab(tabs, selectedTab) {
    (0, _forEach2['default'])(tabs, function (tab) {
      _utils2['default'].removeClass(tab, IS_SELECTED);
      tab.removeAttribute(ARIA_SELECTED);
      tab.setAttribute('tabindex', -1);
    });

    selectedTab.focus();
    _utils2['default'].addClass(selectedTab, IS_SELECTED);
    selectedTab.setAttribute(ARIA_SELECTED, true);
    selectedTab.setAttribute('tabindex', 0);
  }

  function getPanelForTab(component, selectedTab) {
    var selectedPanelId = selectedTab.getAttribute('href');
    return component.querySelector(selectedPanelId);
  }

  function addDefaultAria(_ref3) {
    var tablist = _ref3.tablist,
        tabs = _ref3.tabs,
        panels = _ref3.panels;

    tablist.setAttribute('role', 'tablist');
    (0, _forEach2['default'])(tabs, function (tab) {
      var id = tab.getAttribute('href').substring(1);
      tab.setAttribute('aria-controls', id);
      tab.setAttribute('role', 'tab');
    });
    (0, _forEach2['default'])(panels, setAttribute('role', 'tabpanel'));
    (0, _forEach2['default'])(tablist.children, setAttribute('role', 'presentation'));
  }

  function setAttribute(attribute, value) {
    return function (el) {
      return el.setAttribute(attribute, value);
    };
  }

  function removeClass(className) {
    return function (el) {
      return _utils2['default'].removeClass(el, className);
    };
  }
});